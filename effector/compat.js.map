{"version":3,"file":"compat.js","sources":["effector/is.ts","effector/region.ts","effector/createNode.ts","effector/tag.ts","effector/collection.ts","effector/kernel.ts","effector/naming.ts","effector/template.ts","effector/createUnit.ts","effector/combine.ts","effector/defer.ts","effector/createEffect.ts","effector/merge.ts","effector/sample.ts","effector/fork/util.ts","effector/observable.ts","effector/validate.ts","effector/throw.ts","effector/id.ts","effector/bind.ts","effector/step.ts","effector/stateRef.ts","effector/caller.ts","effector/getter.ts","effector/own.ts","effector/config.ts","effector/clearNode.ts","effector/subscription.ts","effector/forward.ts","effector/watch.ts","effector/createDomain.ts","effector/split.ts","effector/fork/allSettled.ts","effector/attach.ts","effector/createApi.ts","effector/fork/fork.ts","effector/fromObservable.ts","effector/guard.ts","effector/fork/hydrate.ts","effector/restore.ts","effector/fork/scopeBind.ts","effector/fork/serialize.ts"],"sourcesContent":["//eslint-disable-next-line\nexport * as is from './validate'\nimport {throwError} from './throw'\n\nexport const isObject = (value: any) =>\n  typeof value === 'object' && value !== null\nexport const isFunction = (value: any) => typeof value === 'function'\n\nexport const assertObject = (value: any) => {\n  if (!isObject(value) && !isFunction(value))\n    throwError('expect first argument be an object') // or function\n}\n\nfunction assertNodeSetItem(value: any, method: string, valueName: string, reason: string) {\n  if ((!isObject(value) && !isFunction(value)) || (!('family' in value) && !('graphite' in value))) {\n    throwError(`${method}: expect ${valueName} to be a unit (store, event or effect)${reason}`)\n  }\n}\nexport function assertNodeSet(value: any, method: string, valueName: string) {\n  if (Array.isArray(value)) {\n    for (let i = 0; i < value.length; i++) {\n      const item = value[i]\n      assertNodeSetItem(item, method, `${i} item of ${valueName}`, '')\n    }\n  } else {\n    assertNodeSetItem(value, method, valueName, ' or array of units')\n  }\n}\n","import {getValue, getGraph, getParent, getMeta} from './getter'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport type {Template} from '../forest/index.h'\nimport {OPEN_O} from './tag'\n\ntype RegionStack = {\n  parent: RegionStack | null\n  value: any\n  template: any\n  sidRoot?: string\n}\n\nexport let regionStack: RegionStack | null = null\n\nexport const readTemplate = (): Template | null =>\n  regionStack && regionStack.template\nexport const readSidRoot = (sid?: string | null) => {\n  if (sid && regionStack && regionStack.sidRoot)\n    sid = `${regionStack.sidRoot}${OPEN_O}${sid}`\n  return sid\n}\n\nexport function withRegion(unit: any, cb: () => void) {\n  regionStack = {\n    parent: regionStack,\n    value: unit,\n    template: getMeta(unit, 'template') || readTemplate(),\n    sidRoot: getMeta(unit, 'sidRoot') || (regionStack && regionStack.sidRoot),\n  }\n  try {\n    return cb()\n  } finally {\n    regionStack = getParent(regionStack)\n  }\n}\n\nexport const withFactory = ({\n  sid,\n  name,\n  loc,\n  method,\n  fn,\n}: {\n  sid: string\n  name?: string\n  loc?: any\n  method?: string\n  fn: () => any\n}) => {\n  const sidNode = createNode({\n    meta: {\n      sidRoot: readSidRoot(sid),\n      name,\n      loc,\n      method,\n    },\n  })\n  return withRegion(sidNode, fn)\n}\n","import {Node, NodeUnit, Cmd, StateRef} from './index.h'\nimport {getGraph, getOwners, getLinks, getValue} from './getter'\nimport {nextNodeID} from './id'\nimport {CROSSLINK, STORE} from './tag'\nimport {regionStack} from './region'\nimport {own} from './own'\n\nconst arrifyNodes = (\n  list: NodeUnit | Array<NodeUnit | NodeUnit[]> = [],\n): Node[] => (Array.isArray(list) ? list : [list]).flat().map(getGraph)\n\nexport function createNode({\n  node = [],\n  from,\n  source,\n  parent = from || source,\n  to,\n  target,\n  child = to || target,\n  scope = {},\n  meta = {},\n  family: familyRaw = {type: 'regular'},\n  regional,\n}: {\n  node?: Array<Cmd | false | void | null>\n  from?: NodeUnit | NodeUnit[]\n  source?: NodeUnit | NodeUnit[]\n  parent?: NodeUnit | NodeUnit[]\n  to?: NodeUnit | NodeUnit[]\n  target?: NodeUnit | NodeUnit[]\n  child?: NodeUnit | NodeUnit[]\n  scope?: {[name: string]: any}\n  meta?: {[name: string]: any}\n  family?: {\n    type?: 'regular' | 'crosslink' | 'domain'\n    links?: NodeUnit | NodeUnit[]\n    owners?: NodeUnit | Array<NodeUnit | NodeUnit[]>\n  }\n  regional?: boolean\n} = {}): Node {\n  const sources = arrifyNodes(parent)\n  const links = arrifyNodes(familyRaw.links)\n  const owners = arrifyNodes(familyRaw.owners)\n  const seq: Cmd[] = []\n  for (let i = 0; i < node.length; i++) {\n    const item = node[i]\n    if (!item) continue\n    seq.push(item)\n  }\n  const result: Node = {\n    id: nextNodeID(),\n    seq,\n    next: arrifyNodes(child),\n    meta,\n    scope,\n    family: {\n      type: familyRaw.type || CROSSLINK,\n      links,\n      owners,\n    },\n  }\n  for (let i = 0; i < links.length; i++) {\n    getOwners(links[i]).push(result)\n  }\n  for (let i = 0; i < owners.length; i++) {\n    getLinks(owners[i]).push(result)\n  }\n  for (let i = 0; i < sources.length; i++) {\n    sources[i].next.push(result)\n  }\n  if (regional && regionStack) {\n    own(getValue(regionStack), [result])\n  }\n  return result\n}\n","export const STORE = 'store'\nexport const EVENT = 'event'\nexport const EFFECT = 'effect'\nexport const DOMAIN = 'domain'\nexport const SCOPE = 'scope'\nexport const SAMPLER = 'sampler'\nexport const CROSSLINK = 'crosslink'\nexport const MAP = 'map'\nexport const STACK = 'stack'\nexport const BARRIER = 'barrier'\nexport const VALUE = 'value'\nexport const FORK_COUNTER = 'forkInFlightCounter'\nexport const SAMPLE = 'sample'\nexport const FILTER = 'filter'\nexport const REG_A = 'a'\nexport const OPEN_O = `\\u0254`\n","export function forIn<T>(\n  obj: Record<string, T>,\n  cb: (value: T, key: string) => void,\n) {\n  for (const key in obj) {\n    cb(obj[key], key)\n  }\n}\n\nexport const includes = (list: any[], item: any) => list.includes(item)\n\nexport const removeItem = (list: any[], item: any) => {\n  const pos = list.indexOf(item)\n  if (pos !== -1) {\n    list.splice(pos, 1)\n  }\n}\n\nexport function forEach<T>(\n  list: T[],\n  fn: (item: T, index: number, list: T[]) => void,\n): void\nexport function forEach<T>(list: Set<T>, fn: (item: T) => void): void\nexport function forEach(list: any, fn: Function) {\n  list.forEach(fn)\n}\n","import type {Leaf} from '../forest/index.h'\n\nimport type {Cmd, Node, NodeUnit, StateRef} from './index.h'\nimport {readRef} from './stateRef'\nimport {getForkPage, getGraph, getMeta, getParent, getValue} from './getter'\nimport {\n  STORE,\n  EFFECT,\n  SAMPLER,\n  STACK,\n  BARRIER,\n  VALUE,\n  FILTER,\n  REG_A,\n  MAP,\n} from './tag'\nimport type {Scope} from './unit.h'\nimport {forEach} from './collection'\n\n/** Names of priority groups */\ntype PriorityTag = 'child' | 'pure' | 'barrier' | 'sampler' | 'effect'\n\n/**\n * Position in the current branch,\n * including call stack, priority type\n * and index of next step in the executed Node\n */\ntype Layer = {\n  idx: number\n  stack: Stack\n  type: PriorityTag\n  id: number\n}\n\n/** Call stack */\nexport type Stack = {\n  value: any\n  a: any\n  b: any\n  parent: Stack | null\n  node: Node\n  page: Leaf | null\n  forkPage?: Scope | null | void\n}\n\n/** Queue as linked list or skew heap */\ntype QueueItem = {\n  /** node value */\n  v: Layer\n  /** left node. always null in queue but used in skew heap */\n  l: QueueItem | null\n  /** right node */\n  r: QueueItem | null\n}\ntype QueueBucket = {\n  first: QueueItem | null\n  last: QueueItem | null\n  size: number\n}\n\n/** Dedicated local metadata */\ntype Local = {\n  fail: boolean\n  scope: {[key: string]: any}\n}\n\nlet heap: QueueItem | null = null\n\nconst merge = (a: QueueItem | null, b: QueueItem | null): QueueItem | null => {\n  if (!a) return b\n  if (!b) return a\n\n  let ret\n  const isSameType = a.v.type === b.v.type\n  if (\n    /**\n     * if both nodes has the same PriorityType\n     * and first node is created after second one\n     */\n    (isSameType && a.v.id > b.v.id) ||\n    /** if first node is \"sampler\" and second node is \"barrier\" */\n    (!isSameType && a.v.type === SAMPLER)\n  ) {\n    ret = a\n    a = b\n    b = ret\n  }\n  ret = merge(a.r, b)\n  a.r = a.l\n  a.l = ret\n\n  return a\n}\n\n/** queue buckets for each PriorityType */\nconst queue: QueueBucket[] = []\nlet ix = 0\nwhile (ix < 5) {\n  /**\n   * although \"sampler\" and \"barrier\" are using heap instead of linked list,\n   * their buckets are still useful: they maintains size of heap queue\n   */\n  queue.push({first: null, last: null, size: 0})\n  ix += 1\n}\n\nconst deleteMin = () => {\n  for (let i = 0; i < 5; i++) {\n    const list = queue[i]\n    if (list.size > 0) {\n      /**\n       * second bucket is for \"barrier\" PriorityType (used in combine)\n       * and third bucket is for \"sampler\" PriorityType (used in sample and guard)\n       */\n      if (i === 2 || i === 3) {\n        list.size -= 1\n        const value = heap!.v\n        heap = merge(heap!.l, heap!.r)\n        return value\n      }\n      if (list.size === 1) {\n        list.last = null\n      }\n      const item = list.first\n      list.first = item!.r\n      list.size -= 1\n      return item!.v\n    }\n  }\n}\nconst pushFirstHeapItem = (\n  type: PriorityTag,\n  page: Leaf | null,\n  node: Node,\n  parent: Stack | null,\n  value: any,\n  forkPage?: Scope | null | void,\n) =>\n  pushHeap(\n    0,\n    {\n      a: null,\n      b: null,\n      node,\n      parent,\n      value,\n      page,\n      forkPage,\n    },\n    type,\n  )\nconst pushHeap = (\n  idx: number,\n  stack: Stack,\n  type: PriorityTag,\n  id: number = 0,\n) => {\n  const priority = getPriority(type)\n  const bucket: QueueBucket = queue[priority]\n  const item: QueueItem = {\n    v: {\n      idx,\n      stack,\n      type,\n      id,\n    },\n    l: null,\n    r: null,\n  }\n  /**\n   * second bucket is for \"barrier\" PriorityType (used in combine)\n   * and third bucket is for \"sampler\" PriorityType (used in sample and guard)\n   */\n  if (priority === 2 || priority === 3) {\n    heap = merge(heap, item)\n  } else {\n    if (bucket.size === 0) {\n      bucket.first = item\n    } else {\n      bucket.last!.r = item\n    }\n    bucket.last = item\n  }\n  bucket.size += 1\n}\n\nconst getPriority = (t: PriorityTag) => {\n  switch (t) {\n    case 'child':\n      return 0\n    case 'pure':\n      return 1\n    case BARRIER:\n      return 2\n    case SAMPLER:\n      return 3\n    case EFFECT:\n      return 4\n    default:\n      return -1\n  }\n}\n\nconst barriers = new Set<string | number>()\n\nlet isRoot = true\nexport let isWatch = false\nexport let currentPage: Leaf | null = null\nexport let forkPage: Scope | void | null\nexport const setForkPage = (newForkPage: Scope) => {\n  forkPage = newForkPage\n}\nexport const setCurrentPage = (newPage: Leaf | null) => {\n  currentPage = newPage\n}\n\nconst getPageForRef = (page: Leaf | null, id: string) => {\n  if (page) {\n    while (page && !page.reg[id]) {\n      page = getParent(page)\n    }\n    if (page) return page\n  }\n  return null\n}\nexport const getPageRef = (\n  page: Leaf | null,\n  forkPage: Scope | null | void,\n  node: Node | null,\n  ref: StateRef,\n  isGetState?: boolean,\n) => {\n  const pageForRef = getPageForRef(page, ref.id)\n  if (pageForRef) return pageForRef.reg[ref.id]\n  if (forkPage) {\n    initRefInScope(forkPage!, ref, isGetState)\n    return forkPage.reg[ref.id]\n  }\n  return ref\n}\n\nexport function launch(config: {\n  target: NodeUnit | NodeUnit[]\n  params?: any\n  defer?: boolean\n  page?: Leaf | void | null\n  forkPage?: Scope | void\n  stack?: Stack | void\n}): void\nexport function launch(unit: NodeUnit, payload?: any, upsert?: boolean): void\nexport function launch(unit: any, payload?: any, upsert?: boolean) {\n  let pageForLaunch = currentPage\n  let stackForLaunch = null\n  let forkPageForLaunch = forkPage\n  if (unit.target) {\n    payload = unit.params\n    upsert = unit.defer\n    pageForLaunch = 'page' in unit ? unit.page : pageForLaunch\n    if (unit[STACK]) stackForLaunch = unit[STACK]\n    forkPageForLaunch = getForkPage(unit) || forkPageForLaunch\n    unit = unit.target\n  }\n  if (forkPageForLaunch && forkPage && forkPageForLaunch !== forkPage) {\n    forkPage = null\n  }\n  if (Array.isArray(unit)) {\n    for (let i = 0; i < unit.length; i++) {\n      pushFirstHeapItem(\n        'pure',\n        pageForLaunch,\n        getGraph(unit[i]),\n        stackForLaunch,\n        payload[i],\n        forkPageForLaunch,\n      )\n    }\n  } else {\n    pushFirstHeapItem(\n      'pure',\n      pageForLaunch,\n      getGraph(unit),\n      stackForLaunch,\n      payload,\n      forkPageForLaunch,\n    )\n  }\n  if (upsert && !isRoot) return\n  /** main execution code */\n  const lastStartedState = {isRoot, currentPage, forkPage, isWatch}\n  isRoot = false\n  let stop: boolean\n  let skip: boolean\n  let node: Node\n  let value\n  let page: Leaf | null\n  let reg: Record<string, StateRef> | void\n  kernelLoop: while ((value = deleteMin())) {\n    const {idx, stack, type} = value\n    node = stack.node\n    currentPage = page = stack.page\n    forkPage = getForkPage(stack)\n    if (page) reg = page.reg\n    else if (forkPage) reg = forkPage.reg\n    // reg = (page ? page : forkPage ? forkPage : node).reg\n    const hasPageReg = !!page\n    const hasScopeReg = !!forkPage\n    const local: Local = {\n      fail: false,\n      scope: node.scope,\n    }\n    stop = skip = false\n    for (let stepn = idx; stepn < node.seq.length && !stop; stepn++) {\n      const step = node.seq[stepn]\n      switch (step.type) {\n        case BARRIER: {\n          const {priority, barrierID} = step.data\n          const id = page ? `${page.fullID}_${barrierID}` : barrierID\n          if (stepn !== idx || type !== priority) {\n            if (!barriers.has(id)) {\n              barriers.add(id)\n              pushHeap(stepn, stack, priority, barrierID)\n            }\n            continue kernelLoop\n          }\n          barriers.delete(id)\n          break\n        }\n        case 'mov': {\n          const data = step.data\n          let value\n          //prettier-ignore\n          switch (data.from) {\n            case STACK: value = getValue(stack); break\n            case REG_A: /** fall-through case */\n            case 'b':\n              value = stack[data.from]\n              break\n            case VALUE: value = data.store; break\n            case STORE:\n              if (reg && !reg[data.store.id]) {\n                // if (!page.parent) {\n                if (hasPageReg) {\n                  const pageForRef = getPageForRef(page, data.store.id)\n                  stack.page = page = pageForRef\n                  if (pageForRef) {\n                    reg = pageForRef.reg\n                  } else if (hasScopeReg) {\n                    initRefInScope(forkPage!, data.store)\n                    reg = forkPage!.reg\n                  } else {\n                    reg = undefined //node.reg\n                  }\n                } else if (hasScopeReg) {\n                  /** StateRef in Scope.reg created only when needed */\n                  initRefInScope(forkPage!, data.store)\n                } else {\n                  // console.error('should not happen')\n                  /** StateRef should exists at least in Node itself, but it is not found */\n                }\n                // }\n              }\n              // value = getPageRef(page, forkPage, node, data.store.id).current\n              value = readRef(reg ? reg[data.store.id] || data.store : data.store)\n              break\n          }\n          //prettier-ignore\n          switch (data.to) {\n            case STACK: stack.value = value; break\n            case REG_A: /** fall-through case */\n            case 'b':\n              stack[data.to] = value\n              break\n            case STORE:\n              getPageRef(page, forkPage, node, data.target).current = value\n              break\n          }\n          break\n        }\n        case 'check': {\n          skip =\n            getValue(stack) ===\n            (step.data.type === 'defined'\n              ? undefined\n              : readRef(getPageRef(page, forkPage, node, step.data.store)))\n          break\n        }\n        case FILTER:\n          /**\n           * handled edge case: if step.fn will throw,\n           * tryRun will return null\n           * thereby forcing that branch to stop\n           */\n          skip = !tryRun(local, step.data, stack)\n          break\n        case 'run':\n          /** exec 'compute' step when stepn === idx */\n          if (stepn !== idx || type !== EFFECT) {\n            pushHeap(stepn, stack, EFFECT)\n            continue kernelLoop\n          }\n        case 'compute':\n          isWatch = getMeta(node, 'op') === 'watch'\n          stack.value = tryRun(local, step.data, stack)\n          isWatch = lastStartedState.isWatch\n          break\n      }\n      stop = local.fail || skip\n    }\n    if (!stop) {\n      for (let stepn = 0; stepn < node.next.length; stepn++) {\n        pushFirstHeapItem(\n          'child',\n          page,\n          node.next[stepn],\n          stack,\n          getValue(stack),\n          getForkPage(stack),\n        )\n      }\n      const forkPage: Scope | null = getForkPage(stack)\n      if (forkPage) {\n        if (getMeta(node, 'needFxCounter'))\n          pushFirstHeapItem('child', page, forkPage.fxCount, stack, 0, forkPage)\n        if (getMeta(node, 'storeChange'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.storeChange,\n            stack,\n            0,\n            forkPage,\n          )\n        const additionalLinks = forkPage.additionalLinks[node.id]\n        if (additionalLinks) {\n          for (let stepn = 0; stepn < additionalLinks.length; stepn++) {\n            pushFirstHeapItem(\n              'child',\n              page,\n              additionalLinks[stepn],\n              stack,\n              getValue(stack),\n              forkPage,\n            )\n          }\n        }\n      }\n    }\n  }\n  isRoot = lastStartedState.isRoot\n  currentPage = lastStartedState.currentPage\n  forkPage = getForkPage(lastStartedState)\n}\n\nexport const initRefInScope = (\n  scope: {\n    reg: Record<string, StateRef>\n    sidValuesMap: Record<string, any>\n    sidIdMap: Record<string, string>\n  },\n  sourceRef: StateRef,\n  isGetState?: boolean,\n) => {\n  const refsMap = scope.reg\n  if (refsMap[sourceRef.id]) return\n  const ref: StateRef = {\n    id: sourceRef.id,\n    current: sourceRef.current,\n  }\n  if (sourceRef.sid) scope.sidIdMap[sourceRef.sid] = sourceRef.id\n  if (sourceRef.sid && sourceRef.sid in scope.sidValuesMap) {\n    ref.current = scope.sidValuesMap[sourceRef.sid]\n  } else {\n    const noInit = !isGetState && sourceRef.noInit\n    if (!noInit && sourceRef.before) {\n      let isFresh = false\n      forEach(sourceRef.before, cmd => {\n        switch (cmd.type) {\n          case MAP: {\n            const from = cmd.from\n            if (from || cmd.fn) {\n              if (from) initRefInScope(scope, from, isGetState)\n              const value = from && refsMap[from.id].current\n              ref.current = cmd.fn ? cmd.fn(value) : value\n            }\n            break\n          }\n          case 'field': {\n            initRefInScope(scope, cmd.from, isGetState)\n            const from = refsMap[cmd.from.id]\n            if (!isFresh) {\n              isFresh = true\n              if (Array.isArray(ref.current)) {\n                ref.current = [...ref.current]\n              } else {\n                ref.current = {...ref.current}\n              }\n            }\n            ref.current[cmd.field] = refsMap[from.id].current\n            break\n          }\n          case 'closure':\n            break\n        }\n      })\n    }\n  }\n  refsMap[sourceRef.id] = ref\n}\n\n/** try catch for external functions */\nconst tryRun = (\n  local: Local,\n  {fn}: Extract<Cmd, {data: {fn: Function}}>['data'],\n  stack: Stack,\n) => {\n  try {\n    return fn(getValue(stack), local.scope, stack)\n  } catch (err) {\n    console.error(err)\n    local.fail = true\n  }\n}\n","import type {Store, Domain} from './unit.h'\nimport {is} from './is'\nimport {getParent} from './getter'\nimport {forIn} from './collection'\n\nconst getCompostite = (unit: any): CompositeName => unit.compositeName\n\nexport function unitObjectName(objOrArr: any, method: string = 'combine') {\n  let name = method + '('\n  let comma = ''\n  let i = 0\n  forIn(objOrArr, (unit: any) => {\n    /* inlined max object names constant */\n    if (i < 25) {\n      if (unit != null) {\n        name += comma\n        name += is.unit(unit) ? getCompostite(unit).fullName : unit.toString()\n      }\n      i += 1\n      comma = ', '\n    }\n  })\n  return name + ')'\n}\n\nexport function setStoreName<State>(store: Store<State>, rawName: string) {\n  store.shortName = rawName\n  Object.assign(getCompostite(store), createName(rawName, getParent(store)))\n}\n\nexport type CompositeName = {\n  shortName: string\n  fullName: string\n  path: string[]\n}\n\nexport function createName(name: string, parent?: Domain): CompositeName {\n  let path: string[]\n  let fullName\n  const shortName = name\n  if (!parent) {\n    path = name.length === 0 ? [] : [name]\n    fullName = name\n  } else {\n    const composite = getCompostite(parent)\n    if (name.length === 0) {\n      path = composite.path\n      fullName = composite.fullName\n    } else {\n      path = composite.path.concat([name])\n      fullName =\n        composite.fullName.length === 0\n          ? name\n          : '' + composite.fullName + '/' + name\n    }\n  }\n  return {shortName, fullName, path}\n}\n","import {readTemplate} from './region'\nimport type {Template, TemplateHandlers} from '../forest/index.h'\n\nexport function applyTemplate<K extends keyof TemplateHandlers>(\n  method: K,\n  ...args: Parameters<TemplateHandlers[K]> extends [Template, ...infer Args]\n    ? Args\n    : never\n): ReturnType<TemplateHandlers[K]> | void {\n  const template = readTemplate()\n  if (template) {\n    const fn: any = template.handlers[method]\n    if (fn) return fn(template, ...args)\n  }\n}\n","import {observableSymbol} from './observable'\n\nimport {is, isObject, isFunction, assertObject, assertNodeSet} from './is'\nimport type {Store, Event} from './unit.h'\n\nimport {step} from './typedef'\nimport {createStateRef, readRef, addRefOp} from './stateRef'\nimport {nextUnitID} from './id'\nimport {callStackAReg, callARegStack, callStack} from './caller'\nimport {bind} from './bind'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {\n  launch,\n  currentPage,\n  forkPage,\n  setCurrentPage,\n  initRefInScope,\n} from './kernel'\n\nimport {Subscriber, Config} from './index.h'\nimport {createName} from './naming'\nimport {createLinkNode} from './forward'\nimport {watchUnit} from './watch'\nimport {createSubscription} from './subscription'\nimport {readTemplate, readSidRoot} from './region'\nimport {\n  getSubscribers,\n  getConfig,\n  getNestedConfig,\n  getStoreState,\n  getGraph,\n  getParent,\n} from './getter'\nimport {throwError} from './throw'\nimport {DOMAIN, STORE, EVENT, MAP, FILTER, REG_A, OPEN_O} from './tag'\nimport {applyTemplate} from './template'\n\nconst normalizeConfig = (part: any, config: any) => {\n  if (isObject(part)) {\n    normalizeConfig(getConfig(part), config)\n    if (part.name != null) {\n      if (isObject(part.name)) normalizeConfig(part.name, config)\n      else if (isFunction(part.name)) config.handler = part.name\n      else config.name = part.name\n    }\n    if (part.loc) config.loc = part.loc\n    if (part.sid || part.sid === null) config.sid = part.sid\n    if (part.handler) config.handler = part.handler\n    if (part.updateFilter) config.updateFilter = part.updateFilter\n    if (getParent(part)) config.parent = getParent(part)\n    if ('strict' in part) config.strict = part.strict\n    if (part.named) config.named = part.named\n    normalizeConfig(getNestedConfig(part), config)\n  }\n  return config\n}\n\nexport const applyParentHook = (\n  source: any,\n  target: any,\n  hookType: 'event' | 'effect' = EVENT,\n) => {\n  if (getParent(source)) getParent(source).hooks[hookType](target)\n}\n\nlet isStrict: boolean\nexport const initUnit = (\n  kind: any,\n  unit: any,\n  rawConfigA: any,\n  rawConfigB?: any,\n) => {\n  const config = normalizeConfig(\n    {\n      name: rawConfigB,\n      config: rawConfigA,\n    },\n    {},\n  )\n  const isDomain = kind === DOMAIN\n  const id = nextUnitID()\n  let {parent = null, sid = null, strict = true, named = null} = config\n  const name = named ? named : config.name || (isDomain ? '' : id)\n  const compositeName = createName(name, parent)\n\n  const meta: Record<string, any> = {\n    unit: (unit.kind = kind),\n    name: (unit.shortName = name),\n    sid: (unit.sid = readSidRoot(sid)),\n    named,\n    unitId: (unit.id = id),\n  }\n  unit.parent = parent\n  unit.compositeName = compositeName\n  unit.defaultConfig = config\n  unit.thru = (fn: Function) => fn(unit)\n  unit.getType = () => compositeName.fullName\n  if (!isDomain) {\n    unit.subscribe = (observer: Subscriber<any>) => {\n      assertObject(observer)\n      return unit.watch(\n        isFunction(observer)\n          ? observer\n          : (upd: any) => {\n              if (observer.next) {\n                observer.next(upd)\n              }\n            },\n      )\n    }\n    unit[observableSymbol] = () => unit\n    const template = readTemplate()\n    if (template) meta.nativeTemplate = template\n  }\n  isStrict = strict\n  return meta\n}\nexport const createNamedEvent = (named: string) => createEvent({named})\n\nconst deriveEvent = (event: any, op: string, fn: any, node: any) => {\n  let config\n  if (isObject(fn)) {\n    config = fn\n    fn = fn.fn\n  }\n  const mapped = createEvent({name: `${event.shortName} → *`, [OPEN_O]: config})\n  createLinkNode(event, mapped, {\n    scope: {fn},\n    node,\n    meta: {op},\n  })\n  return mapped\n}\n\nfunction callCreate(unit: any, template: any, payload: any, args: any[]): any {\n  const oldPage = currentPage\n  let page = null\n  if (template) {\n    page = currentPage\n    while (page && page.template !== template) {\n      page = getParent(page)\n    }\n  }\n  setCurrentPage(page)\n  const result = unit.create(payload, args)\n  setCurrentPage(oldPage)\n  return result\n}\n\nexport function createEvent<Payload = any>(\n  nameOrConfig?: any,\n  maybeConfig?: any,\n): Event<Payload> {\n  const event: any = (payload: Payload, ...args: any[]) => {\n    if (currentPage) {\n      return callCreate(event, template, payload, args)\n    }\n    return event.create(payload, args)\n  }\n  event.graphite = createNode({\n    meta: initUnit(EVENT, event, maybeConfig, nameOrConfig),\n    regional: true,\n  })\n  //eslint-disable-next-line no-unused-vars\n  event.create = (params: any, _: any) => {\n    launch({target: event, params, forkPage: forkPage!})\n    return params\n  }\n  event.watch = bind(watchUnit, event)\n  event.map = (fn: any) =>\n    deriveEvent(event, MAP, fn, [step.compute({fn: callStack})])\n  event.filter = (fn: any) =>\n    deriveEvent(event, FILTER, fn.fn ? fn : fn.fn, [\n      step.filter({fn: callStack}),\n    ])\n  event.filterMap = (fn: any) =>\n    deriveEvent(event, 'filterMap', fn, [\n      step.compute({fn: callStack}),\n      step.check.defined(),\n    ])\n  event.prepend = (fn: any) => {\n    const contramapped: Event<any> = createEvent('* → ' + event.shortName, {\n      parent: getParent(event),\n    })\n    applyTemplate('eventPrepend', getGraph(contramapped))\n    createLinkNode(contramapped, event, {\n      scope: {fn},\n      node: [step.compute({fn: callStack})],\n      meta: {op: 'prepend'},\n    })\n    applyParentHook(event, contramapped)\n    return contramapped\n  }\n  const template = readTemplate()\n  return event\n}\n\nexport function createStore<State>(\n  defaultState: State,\n  props?: Config,\n): Store<State> {\n  const plainState = createStateRef(defaultState)\n  const oldState = createStateRef(defaultState)\n  const updates = createNamedEvent('updates')\n  applyTemplate('storeBase', plainState, oldState)\n  const plainStateId = plainState.id\n  const store: any = {\n    subscribers: new Map(),\n    updates,\n    defaultState,\n    stateRef: plainState,\n    getState() {\n      let targetRef = plainState\n      let reachedPage\n      if (currentPage) {\n        let page = currentPage\n        while (page && !page.reg[plainStateId]) {\n          page = getParent(page)\n        }\n        if (page) reachedPage = page\n      }\n      if (!reachedPage && forkPage) {\n        initRefInScope(forkPage, plainState, true)\n        reachedPage = forkPage\n      }\n      if (reachedPage) targetRef = reachedPage.reg[plainStateId]\n      return readRef(targetRef)\n    },\n    setState(state: any) {\n      launch({\n        target: store,\n        params: state,\n        defer: true,\n        forkPage: forkPage!,\n      })\n    },\n    reset(...units: any[]) {\n      for (const unit of units) store.on(unit, () => store.defaultState)\n      return store\n    },\n    on(nodeSet: any, fn: Function) {\n      assertNodeSet(nodeSet, '.on', 'first argument')\n      if (Array.isArray(nodeSet)) {\n        for (const event of nodeSet) {\n          onEvent(event, fn)\n        }\n      } else {\n        onEvent(nodeSet, fn)\n      }\n      return store\n    },\n    off(unit: any) {\n      const currentSubscription = getSubscribers(store).get(unit)\n      if (currentSubscription) {\n        currentSubscription()\n        getSubscribers(store).delete(unit)\n      }\n      return store\n    },\n    map(fn: any, firstState?: any) {\n      let config\n      if (isObject(fn)) {\n        config = fn\n        fn = fn.fn\n      }\n      if (firstState !== undefined) {\n        console.error(\n          'second argument of store.map is deprecated, use updateFilter instead',\n        )\n      }\n      let lastResult\n      const storeState = store.getState()\n      const template = readTemplate()\n      if (template) {\n        lastResult = null\n      } else if (storeState !== undefined) {\n        lastResult = fn(storeState, firstState)\n      }\n\n      const innerStore: Store<any> = createStore(lastResult, {\n        name: `${store.shortName} → *`,\n        [OPEN_O]: config,\n        strict: false,\n      })\n      const linkNode = updateStore(store, innerStore, MAP, false, fn)\n      addRefOp(getStoreState(innerStore), {\n        type: MAP,\n        fn,\n        from: plainState,\n      })\n      getStoreState(innerStore).noInit = true\n      applyTemplate('storeMap', plainState, linkNode)\n      return innerStore\n    },\n    watch(eventOrFn: any, fn?: Function) {\n      if (!fn || !is.unit(eventOrFn)) {\n        const subscription = watchUnit(store, eventOrFn)\n        if (!applyTemplate('storeWatch', plainState, eventOrFn)) {\n          eventOrFn(store.getState())\n        }\n        return subscription\n      }\n      if (!isFunction(fn)) throwError('second argument should be a function')\n      return eventOrFn.watch((payload: any) => fn(store.getState(), payload))\n    },\n  }\n  function onEvent(event: any, fn: Function) {\n    store.off(event)\n    getSubscribers(store).set(\n      event,\n      createSubscription(\n        updateStore(event, store, 'on', true, fn, updateFilter),\n      ),\n    )\n  }\n  const meta = initUnit(STORE, store, props)\n  const updateFilter = store.defaultConfig.updateFilter\n  store.graphite = createNode({\n    scope: {state: plainState},\n    node: [\n      step.check.defined(),\n      step.check.changed({\n        store: oldState,\n      }),\n      updateFilter && step.mov({store: oldState, to: REG_A}),\n      updateFilter &&\n        step.filter({\n          fn: (update, _, {a}) => updateFilter(update, a),\n        }),\n      step.update({\n        store: plainState,\n      }),\n      step.update({\n        store: oldState,\n      }),\n    ],\n    child: updates,\n    meta,\n    regional: true,\n  })\n  if (meta.sid) {\n    meta.storeChange = true\n    plainState.sid = meta.sid\n  }\n  if (isStrict && defaultState === undefined)\n    throwError(\"current state can't be undefined, use null instead\")\n  own(store, [updates])\n  return store\n}\n\nconst updateStore = (\n  from: any,\n  store: Store<any>,\n  op: string,\n  stateFirst: boolean,\n  fn: Function,\n  updateFilter?: Function,\n) => {\n  const storeRef = getStoreState(store)\n  const node = [\n    step.mov({store: storeRef, to: REG_A}),\n    step.compute({\n      fn: stateFirst ? callARegStack : callStackAReg,\n    }),\n    step.check.defined(),\n    step.check.changed({store: storeRef}),\n    updateFilter &&\n      step.filter({\n        fn: (update, _, {a}) => updateFilter(update, a),\n      }),\n    step.update({store: storeRef}),\n  ]\n  applyTemplate(\n    'storeOnMap',\n    storeRef,\n    node,\n    is.store(from) && getStoreState(from),\n  )\n  return createLinkNode(from, store, {\n    scope: {fn},\n    node,\n    meta: {op},\n  })\n}\n","import type {Store} from './unit.h'\nimport {createStore} from './createUnit'\nimport {createStateRef, addRefOp} from './stateRef'\nimport {step} from './typedef'\nimport {onConfigNesting} from './config'\nimport {getGraph, getStoreState, setMeta} from './getter'\nimport {is, isFunction, isObject} from './is'\nimport {unitObjectName} from './naming'\nimport {createLinkNode} from './forward'\nimport {throwError} from './throw'\nimport {readTemplate} from './region'\nimport {forIn} from './collection'\nimport {BARRIER, MAP, REG_A, VALUE} from './tag'\nimport {applyTemplate} from './template'\nimport {callStack} from './caller'\n\nexport function combine(...args: any[]): Store<any> {\n  let handler\n  let stores\n  let config\n  onConfigNesting(args[0], (injectedData, userConfig) => {\n    config = injectedData\n    args = userConfig\n  })\n  const rawHandler = args[args.length - 1]\n  if (isFunction(rawHandler)) {\n    stores = args.slice(0, -1)\n    handler = rawHandler\n  } else {\n    stores = args\n  }\n\n  let structStoreShape\n  let shapeReady\n  if (stores.length === 1) {\n    const obj = stores[0]\n    /*\n      without edge case combine(Color, (Color) => '~')\n      */\n    if (!is.store(obj)) {\n      /*\n      case combine([R,G,B], ([R,G,B]) => '~')\n      case combine({R,G,B}, ({R,G,B}) => '~')\n\n      edge case combine([Color], ([Color]) => '~')\n      edge case combine({Color}, ({Color}) => '~')\n\n      edge case combine([R,G,B])\n      edge case combine({R,G,B})\n\n      edge case combine([Color])\n      edge case combine({Color})\n      */\n      structStoreShape = obj\n      shapeReady = true\n    }\n  }\n  let noArraySpread: boolean | void\n  if (!shapeReady) {\n    /*\n    case combine(R,G,B, (R,G,B) => '~')\n    */\n    structStoreShape = stores\n    /*\n    without edge case combine(R,G,B)\n    without edge case combine(Color)\n    */\n    if (handler) {\n      noArraySpread = true\n      const fn = handler\n      handler = (list: any[]) => fn(...list)\n    }\n  }\n  if (!isObject(structStoreShape)) throwError('shape should be an object')\n  return storeCombination(\n    Array.isArray(structStoreShape),\n    !noArraySpread,\n    structStoreShape,\n    config,\n    handler,\n  )\n}\n\nconst storeCombination = (\n  isArray: boolean,\n  needSpread: boolean,\n  obj: any,\n  config?: string,\n  fn?: (upd: any) => any,\n) => {\n  const clone = isArray ? (list: any) => list.slice() : (obj: any) => ({...obj})\n  const defaultState: any = isArray ? [] : {}\n\n  const stateNew = clone(defaultState)\n  const rawShape = createStateRef(stateNew)\n  const isFresh = createStateRef(true)\n  rawShape.type = isArray ? 'list' : 'shape'\n  rawShape.noInit = true\n  applyTemplate('combineBase', rawShape, isFresh)\n  const store = createStore(stateNew, {\n    name: config ? config : unitObjectName(obj),\n  })\n  const storeStateRef = getStoreState(store)\n  storeStateRef.noInit = true\n  setMeta(store, 'isCombine', true)\n  const node = [\n    step.check.defined(),\n    step.mov({\n      store: rawShape,\n      to: REG_A,\n    }),\n    //prettier-ignore\n    step.filter({\n      fn: (upd, {key}, {a}) => upd !== a[key],\n    }),\n    step.mov({\n      store: isFresh,\n      to: 'b',\n    }),\n    step.compute({\n      fn(upd, {clone, key, spread}, reg) {\n        if (spread && reg.b) {\n          reg.a = clone(reg.a)\n        }\n        reg.a[key] = upd\n      },\n    }),\n    step.mov({\n      from: REG_A,\n      target: rawShape,\n    }),\n    step.mov({\n      from: VALUE,\n      store: false,\n      target: isFresh,\n    }),\n    step.barrier({priority: BARRIER}),\n    step.mov({\n      from: VALUE,\n      store: true,\n      target: isFresh,\n    }),\n    step.mov({store: rawShape}),\n    fn && step.compute({fn: callStack}),\n    step.check.changed({\n      store: storeStateRef,\n    }),\n  ]\n  forIn(obj, (child: Store<any> | any, key) => {\n    if (!is.store(child)) {\n      stateNew[key] = defaultState[key] = child\n      return\n    }\n    defaultState[key] = child.defaultState\n    stateNew[key] = child.getState()\n    const linkNode = createLinkNode(child, store, {\n      scope: {key, clone, fn, spread: needSpread},\n      node,\n      meta: {op: 'combine'},\n    })\n    const childRef = getStoreState(child)\n    addRefOp(rawShape, {\n      type: 'field',\n      field: key,\n      from: childRef,\n    })\n    applyTemplate('combineField', childRef, linkNode)\n  })\n\n  store.defaultShape = obj\n  addRefOp(storeStateRef, {\n    type: MAP,\n    from: rawShape,\n    fn,\n  })\n  if (!readTemplate()) {\n    store.defaultState = fn\n      ? (storeStateRef.current = fn(stateNew))\n      : defaultState\n  }\n  return store\n}\n\nexport function createStoreObject(...args: any[]) {\n  console.error('createStoreObject is deprecated, use combine instead')\n  return combine(...args)\n}\n","export function createDefer(): {\n  rs: (value: any) => any\n  rj: (value: any) => any\n  req: Promise<any>\n} {\n  const result = {} as {\n    rs: (value: any) => any\n    rj: (value: any) => any\n    req: Promise<any>\n  }\n  result.req = new Promise((rs, rj) => {\n    result.rs = rs\n    result.rj = rj\n  })\n  result.req.catch(err => {})\n  return result\n}\n","import {step} from './typedef'\nimport {getForkPage, getGraph, getMeta, getParent, setMeta} from './getter'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {launch, setForkPage, forkPage, isWatch, Stack} from './kernel'\nimport {createNamedEvent, createStore, createEvent} from './createUnit'\nimport {createDefer} from './defer'\nimport {isObject, isFunction} from './is'\nimport {throwError} from './throw'\nimport {EFFECT} from './tag'\nimport type {Unit} from './index.h'\n\nexport function createEffect<Payload, Done>(\n  nameOrConfig: any,\n  maybeConfig?: any,\n) {\n  const instance: any = createEvent(nameOrConfig, maybeConfig)\n  let handler =\n    instance.defaultConfig.handler ||\n    (() => throwError(`no handler used in ${instance.getType()}`))\n  const node = getGraph(instance)\n  setMeta(node, 'unit', (instance.kind = EFFECT))\n  instance.use = (fn: Function) => {\n    if (!isFunction(fn)) throwError('.use argument should be a function')\n    handler = fn\n    return instance\n  }\n  const anyway = (instance.finally = createNamedEvent('finally'))\n  const done = (instance.done = (anyway as any).filterMap({\n    named: 'done',\n    fn({status, params, result}: any) {\n      if (status === 'done') return {params, result}\n    },\n  }))\n  const fail = (instance.fail = (anyway as any).filterMap({\n    named: 'fail',\n    fn({status, params, error}: any) {\n      if (status === 'fail') return {params, error}\n    },\n  }))\n  const doneData = (instance.doneData = done.map({\n    named: 'doneData',\n    fn: ({result}: any) => result,\n  }))\n  const failData = (instance.failData = fail.map({\n    named: 'failData',\n    fn: ({error}: any) => error,\n  }))\n\n  const effectRunner = createNode({\n    scope: {\n      getHandler: (instance.use.getCurrent = () => handler),\n      finally: anyway,\n      handlerId: getMeta(node, 'sid'),\n    },\n    node: [\n      step.run({\n        fn({params, req}, {finally: anyway, getHandler, handlerId}, stack) {\n          const onResolve = onSettled(params, req, true, anyway, stack)\n          const onReject = onSettled(params, req, false, anyway, stack)\n          let result\n          try {\n            let handler: (data: any) => any\n            if (getForkPage(stack)) {\n              const handler_ = getForkPage(stack).handlers[handlerId]\n              handler = handler_ ? handler_ : getHandler()\n            } else {\n              handler = getHandler()\n            }\n            result = handler(params)\n          } catch (err) {\n            return void onReject(err)\n          }\n          if (isObject(result) && isFunction(result.then)) {\n            result.then(onResolve, onReject)\n          } else {\n            onResolve(result)\n          }\n        },\n      }),\n    ],\n    meta: {\n      op: 'fx',\n      fx: 'runner',\n    },\n  })\n  node.scope.runner = effectRunner\n  node.seq.push(\n    step.compute({\n      fn(params, scope, stack) {\n        // empty stack means that this node was launched directly\n        if (!getParent(stack)) return params\n        return {\n          params,\n          req: {\n            rs(data: any) {},\n            rj(data: any) {},\n          },\n        }\n      },\n    }),\n    step.run({\n      fn(upd, {runner}, stack) {\n        launch({\n          target: runner,\n          params: upd,\n          defer: true,\n          forkPage: getForkPage(stack),\n        })\n        return upd.params\n      },\n    }),\n  )\n  instance.create = (params: Payload) => {\n    const req = createDefer()\n    const payload = {params, req}\n    if (forkPage) {\n      if (!isWatch) {\n        const savedFork = forkPage\n        req.req\n          .finally(() => {\n            setForkPage(savedFork)\n          })\n          .catch(() => {})\n      }\n      launch({\n        target: instance,\n        params: payload,\n        forkPage,\n      })\n    } else {\n      launch(instance, payload)\n    }\n    return req.req\n  }\n\n  const inFlight = (instance.inFlight = createStore(0, {named: 'inFlight'})\n    .on(instance, x => x + 1)\n    .on(anyway, x => x - 1))\n  setMeta(anyway, 'needFxCounter', true)\n  setMeta(instance, 'needFxCounter', true)\n  const pending = (instance.pending = inFlight.map({\n    //@ts-ignore\n    fn: amount => amount > 0,\n    named: 'pending',\n  }))\n\n  own(instance, [\n    anyway,\n    done,\n    fail,\n    doneData,\n    failData,\n    pending,\n    inFlight,\n    effectRunner,\n  ])\n  return instance\n}\n\nexport const onSettled =\n  (\n    params: any,\n    req: {\n      rs(_: any): any\n      rj(_: any): any\n    },\n    ok: boolean,\n    anyway: Unit,\n    stack: Stack,\n  ) =>\n  (data: any) =>\n    launch({\n      target: [anyway, sidechain],\n      params: [\n        ok\n          ? {\n              status: 'done',\n              params,\n              result: data,\n            }\n          : {\n              status: 'fail',\n              params,\n              error: data,\n            },\n        {\n          fn: ok ? req.rs : req.rj,\n          value: data,\n        },\n      ],\n      defer: true,\n      page: stack.page,\n      forkPage: getForkPage(stack),\n    })\n\nexport const sidechain = createNode({\n  node: [\n    step.run({\n      fn({fn, value}) {\n        fn(value)\n      },\n    }),\n  ],\n  meta: {op: 'fx', fx: 'sidechain'},\n})\n","import {Store, Event, Effect} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {forward} from './forward'\nimport {unitObjectName} from './naming'\nimport {assertNodeSet} from './is'\n\nexport function merge<T>(\n  events: Array<Event<T> | Store<T> | Effect<T, any, any>>,\n  config?: object,\n): Event<T> {\n  const result = createEvent(config || unitObjectName(events, 'merge'))\n  assertNodeSet(events, 'merge', 'first argument')\n  forward({\n    from: events,\n    to: result,\n    meta: {op: 'merge'},\n  })\n  return result\n}\n","import {combine} from './combine'\nimport {step} from './typedef'\nimport {createStateRef, readRef} from './stateRef'\nimport {callStackAReg, callARegStack} from './caller'\nimport {processArgsToConfig} from './config'\nimport {getStoreState, getGraph} from './getter'\nimport {own} from './own'\nimport {assertNodeSet, is, isObject} from './is'\nimport {createStore} from './createUnit'\nimport {createEvent} from './createUnit'\nimport {createLinkNode} from './forward'\nimport {createNode} from './createNode'\nimport {throwError} from './throw'\nimport {forEach} from './collection'\nimport {REG_A, SAMPLE, SAMPLER, STACK, STORE, VALUE} from './tag'\nimport {merge} from './merge'\nimport {applyTemplate} from './template'\n\nconst sampleConfigFields = ['source', 'clock', 'target']\n\nfunction validateSampleConfig(config: any) {\n  let atLeastOneFieldExists = false\n  forEach(sampleConfigFields, field => {\n    if (field in config) {\n      if (config[field] == null) {\n        throwError(`sample: ${field} should be defined`)\n      }\n      atLeastOneFieldExists = true\n    }\n  })\n  return atLeastOneFieldExists\n}\n\nexport function sample(...args: any): any {\n  let target\n  let name\n  let [[source, clock, fn], metadata] = processArgsToConfig(args)\n  let sid\n  let greedy\n  //config case\n  if (clock === undefined && isObject(source) && validateSampleConfig(source)) {\n    clock = source.clock\n    fn = source.fn\n    greedy = source.greedy\n    //optional target & name accepted only from config\n    target = source.target\n    name = source.name\n    sid = source.sid\n    source = source.source\n  }\n  let needToCombine = true\n  if (source === undefined) {\n    assertNodeSet(clock, 'sample', 'clock')\n    if (Array.isArray(clock)) {\n      clock = merge(clock)\n    }\n    source = clock\n    needToCombine = false\n  }\n  if (needToCombine && !is.unit(source)) {\n    source = combine(source)\n  }\n  if (clock === undefined) {\n    //still undefined!\n    clock = source\n  }\n  assertNodeSet(clock, 'sample', 'clock')\n  name = metadata || name || source.shortName\n  const isUpward = !!target\n  if (!target) {\n    if (is.store(source) && is.store(clock)) {\n      const initialState = fn\n        ? fn(readRef(getStoreState(source)), readRef(getStoreState(clock)))\n        : readRef(getStoreState(source))\n      target = createStore(initialState, {name, sid})\n    } else {\n      target = createEvent(name)\n      applyTemplate('sampleTarget', getGraph(target))\n    }\n  }\n  // const targetTemplate =\n  //   isUpward && is.unit(target) && getGraph(target).meta.nativeTemplate\n  if (is.store(source)) {\n    const sourceRef = getStoreState(source)\n    own(source, [\n      createLinkNode(clock, target, {\n        scope: {fn},\n        // scope: {fn, targetTemplate},\n        node: [\n          applyTemplate('sampleSourceLoader'),\n          //@ts-ignore\n          !greedy && step.barrier({priority: SAMPLER}),\n          step.mov({\n            store: sourceRef,\n            to: fn ? REG_A : STACK,\n          }),\n          fn && step.compute({fn: callARegStack}),\n          applyTemplate('sampleSourceUpward', isUpward),\n        ],\n        meta: {op: SAMPLE, sample: STORE},\n      }),\n    ])\n    applyTemplate('sampleStoreSource', sourceRef)\n  } else {\n    const hasSource = createStateRef(false)\n    const sourceState = createStateRef()\n    const clockState = createStateRef()\n    applyTemplate('sampleNonStoreSource', hasSource, sourceState, clockState)\n    createNode({\n      parent: source,\n      node: [\n        step.update({store: sourceState}),\n        step.mov({\n          from: VALUE,\n          store: true,\n          target: hasSource,\n        }),\n      ],\n      family: {\n        owners: [source, target, clock],\n        links: target,\n      },\n      meta: {op: SAMPLE, sample: 'source'},\n      regional: true,\n    })\n    own(source, [\n      createLinkNode(clock, target, {\n        scope: {\n          fn,\n          // targetTemplate,\n        },\n        node: [\n          applyTemplate('sampleSourceLoader'),\n          step.update({store: clockState}),\n          step.mov({store: hasSource}),\n          step.filter({fn: hasSource => hasSource}),\n          //@ts-ignore\n          !greedy && step.barrier({priority: SAMPLER}),\n          step.mov({store: sourceState}),\n          step.mov({\n            store: clockState,\n            to: REG_A,\n          }),\n          fn && step.compute({fn: callStackAReg}),\n          applyTemplate('sampleSourceUpward', isUpward),\n        ],\n        meta: {op: SAMPLE, sample: 'clock'},\n      }),\n    ])\n  }\n  return target\n}\n","import {getForkPage, getGraph, getMeta, getParent} from '../getter'\nimport {is} from '../is'\nimport {throwError} from '../throw'\nimport {setForkPage, getPageRef, currentPage} from '../kernel'\nimport {createNode} from '../createNode'\nimport {step} from '../typedef'\nimport type {Domain, Scope, Store} from '../unit.h'\nimport type {Node, StateRef} from '../index.h'\nimport {forEach} from '../collection'\nimport {DOMAIN, SAMPLER, FORK_COUNTER, SCOPE} from '../tag'\n\nexport function normalizeValues(\n  values: Map<Store<any>, any> | Array<[any, any]> | Record<string, any>,\n  assertEach?: (key: any, value: any) => void,\n) {\n  if (Array.isArray(values)) values = new Map(values)\n  if (values instanceof Map) {\n    const result = {} as Record<string, any>\n    for (const [key, value] of values) {\n      if (!is.unit(key)) throwError('Map key should be a unit')\n      if (assertEach) assertEach(key, value)\n      result[key.sid!] = value\n    }\n    return result\n  }\n  return values\n}\n\n/**\n everything we need to clone graph section\n reachable from given unit\n */\nexport function cloneGraph(unit?: Domain): Scope {\n  const forkInFlightCounter = createNode({\n    scope: {\n      defers: [],\n      inFlight: 0,\n      fxID: 0,\n    },\n    node: [\n      step.compute({\n        fn(_, scope, stack) {\n          if (!getParent(stack)) {\n            scope.fxID += 1\n            return\n          }\n          if (getMeta(getParent(stack).node, 'named') === 'finally') {\n            scope.inFlight -= 1\n          } else {\n            scope.inFlight += 1\n            scope.fxID += 1\n          }\n        },\n      }),\n      step.barrier({priority: SAMPLER}),\n      step.run({\n        fn(_, scope) {\n          const {inFlight, defers, fxID} = scope\n          if (inFlight > 0 || defers.length === 0) return\n          Promise.resolve().then(() => {\n            if (scope.fxID !== fxID) return\n            forEach(defers.splice(0, defers.length), (defer: any) => {\n              setForkPage(defer.parentFork)\n              defer.rs(defer.value)\n            })\n          })\n        },\n      }),\n    ],\n    meta: {unit: FORK_COUNTER},\n  })\n  const page = {} as Record<string, StateRef>\n  const storeChange = createNode({\n    node: [\n      step.compute({\n        fn(value, __, stack) {\n          const storeStack = getParent(stack)\n          if (storeStack && getParent(storeStack)) {\n            const storeNode = storeStack.node\n            if (\n              !getMeta(storeNode, 'isCombine') ||\n              getMeta(getParent(storeStack).node, 'op') !== 'combine'\n            ) {\n              const forkPage: Scope = getForkPage(stack)\n              const id = storeNode.scope.state.id\n              const sid = getMeta(storeNode, 'sid')\n              forkPage.sidIdMap[sid] = id\n              forkPage.sidValuesMap[sid] = value\n            }\n          }\n        },\n      }),\n    ],\n  })\n  const resultScope: Scope = {\n    cloneOf: unit,\n    reg: page,\n    sidValuesMap: {},\n    sidIdMap: {},\n    getState(store: any) {\n      if ('current' in store) {\n        return getPageRef(currentPage, resultScope, null, store).current\n      }\n      return stateGetter(getGraph(store), resultScope)\n    },\n    kind: SCOPE,\n    graphite: createNode({\n      family: {\n        type: DOMAIN,\n        links: [forkInFlightCounter, storeChange],\n      },\n      meta: {unit: 'fork'},\n      scope: {forkInFlightCounter},\n    }),\n    additionalLinks: {},\n    handlers: {},\n    fxCount: forkInFlightCounter,\n    storeChange,\n  }\n  return resultScope\n}\nfunction stateGetter(node: Node, scope: Scope) {\n  return getPageRef(currentPage, scope, node, node.scope.state, true).current\n}\n","export const observableSymbol: any =\n  (typeof Symbol !== 'undefined' && Symbol.observable) || '@@observable'\n","import {kind} from './index.h'\nimport {DOMAIN, STORE, EVENT, EFFECT, SCOPE} from './tag'\nimport {isObject, isFunction} from './is'\nimport {Domain, Effect, Event, Scope, Store} from './unit.h'\n\nexport const unit = (obj: any) =>\n  (isFunction(obj) || isObject(obj)) && 'kind' in obj\n\nconst is = (type: kind) => (obj: any) => unit(obj) && obj.kind === type\n\nexport const store = is(STORE) as (value: any) => value is Store<unknown>\nexport const event = is(EVENT) as (value: any) => value is Event<unknown>\nexport const effect = is(EFFECT) as (\n  value: any,\n) => value is Effect<unknown, unknown, unknown>\nexport const domain = is(DOMAIN) as (value: any) => value is Domain\nexport const scope = is(SCOPE) as (value: any) => value is Scope\n","export const throwError = (message: string) => {\n  throw Error(message)\n}\n","const idCount = () => {\n  let id = 0\n  return () => `${++id}`\n}\n\nexport const nextUnitID = idCount()\nexport const nextStepID = idCount()\nexport const nextNodeID = idCount()\n","export const bind = (fn: Function, target: any) => fn.bind(null, target)\n","import {\n  StateRef,\n  Run,\n  Filter,\n  Compute,\n  Barrier,\n  CheckDefined,\n  CheckChanged,\n  MovValueToRegister,\n  MovValueToStore,\n  MovStoreToRegister,\n  MovStoreToStore,\n  MovRegisterToStore,\n} from './index.h'\nimport {nextStepID} from './id'\nimport {bind} from './bind'\nimport {BARRIER, FILTER, STACK, STORE} from './tag'\nimport {Stack} from './kernel'\n\nconst cmd = (\n  type: 'check' | 'compute' | 'filter' | 'mov' | 'barrier',\n  data: any,\n): any => ({\n  id: nextStepID(),\n  type,\n  data,\n})\n\nlet nextBarrierID = 0\n\nexport const barrier = ({\n  priority = BARRIER,\n}: {\n  priority?: 'barrier' | 'sampler'\n}): Barrier =>\n  cmd(BARRIER, {\n    barrierID: ++nextBarrierID,\n    priority,\n  })\nexport const mov: {\n  <T>(data: {from: 'value'; store: T; target: StateRef}): MovValueToStore<T>\n  <T>(data: {\n    from: 'value'\n    to: 'stack' | 'a' | 'b'\n    store: T\n  }): MovValueToRegister<T>\n  (data: {from: 'a' | 'b' | 'stack'; target: StateRef}): MovRegisterToStore\n  (data: {\n    from: 'a' | 'b' | 'stack'\n    to: 'a' | 'b' | 'stack'\n  }): MovRegisterToStore\n  (data: {store: StateRef; target: StateRef}): MovStoreToStore\n  (data: {store: StateRef; to: 'stack' | 'a' | 'b'}): MovStoreToRegister\n  (data: {store: StateRef}): MovStoreToRegister\n  // (data: {\n  //   from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  //   to?: 'stack' | 'a' | 'b' | 'store'\n  //   store?: StateRef\n  //   target?: StateRef\n  // }): Mov\n} = ({\n  from = STORE,\n  store,\n  target,\n  to = target ? STORE : STACK,\n}: {\n  from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  to?: 'stack' | 'a' | 'b' | 'store'\n  store?: StateRef\n  target?: StateRef\n}) => cmd('mov', {from, store, to, target})\nexport const check = {\n  defined: (): CheckDefined => cmd('check', {type: 'defined'}),\n  changed: ({store}: {store: StateRef}): CheckChanged =>\n    cmd('check', {type: 'changed', store}),\n}\nexport const compute: (data: {\n  fn(data: any, scope: {[key: string]: any}, stack: Stack): any\n}) => Compute = bind(cmd, 'compute')\nexport const filter: (data: {\n  fn(data: any, scope: {[key: string]: any}, stack: Stack): any\n}) => Filter = bind(cmd, FILTER)\nexport const run: (data: {\n  fn(data: any, scope: {[key: string]: any}, stack: Stack): any\n}) => Run = bind(cmd, 'run')\nexport const update = ({store}: {store: StateRef}) =>\n  mov({from: STACK, target: store})\n","import type {StateRef, StateRefOp} from './index.h'\nimport {nextStepID} from './id'\n\nexport const createStateRef = (current?: any): StateRef => ({\n  id: nextStepID(),\n  current,\n})\nexport const readRef = ({current}: StateRef | {current: any}) => current\n\nexport const addRefOp = (ref: StateRef, op: StateRefOp) => {\n  if (!ref.before) ref.before = []\n  ref.before!.push(op as any)\n}\n","import type {Stack} from './kernel'\n\nexport const callStackAReg = (stack: any, {fn}: any, {a}: Stack) => fn(stack, a)\nexport const callARegStack = (stack: any, {fn}: any, {a}: Stack) => fn(a, stack)\nexport const callStack = (stack: any, {fn}: any, _: Stack) => fn(stack)\n","import type {Node, StateRef} from './index.h'\nimport {OPEN_O} from './tag'\n\nexport const getGraph = (graph: any): Node => graph.graphite || graph\nexport const getOwners = (node: Node) => node.family.owners\nexport const getLinks = (node: Node) => node.family.links\nexport const getStoreState = (store: any): StateRef => store.stateRef\nexport const getConfig = (opts: any) => opts.config\nexport const getNestedConfig = (opts: any) => opts[OPEN_O]\nexport const getValue = (stack: any) => stack.value\nexport const getSubscribers = (store: any) => store.subscribers\nexport const getParent = (unit: any) => unit.parent\nexport const getForkPage = (val: any) => val.forkPage\nexport const getMeta = (unit: any, field: string) => getGraph(unit).meta[field]\nexport const setMeta = (unit: any, field: string, value: any) =>\n  (getGraph(unit).meta[field] = value)\n","import {NodeUnit} from './index.h'\nimport {getGraph, getOwners, getLinks} from './getter'\nimport {DOMAIN, CROSSLINK} from './tag'\n\nexport const own = (ownerUnit: NodeUnit, links: NodeUnit[]) => {\n  const owner = getGraph(ownerUnit)\n  for (let i = 0; i < links.length; i++) {\n    const link = getGraph(links[i])\n    if (owner.family.type !== DOMAIN) link.family.type = CROSSLINK\n    getOwners(link).push(owner)\n    getLinks(owner).push(link)\n  }\n}\n","import {getConfig, getNestedConfig} from './getter'\nimport {assertObject} from './is'\n\nexport const onConfigNesting = (\n  rawConfig: any,\n  fn: (babelData: any, userConfig: any) => void,\n) => {\n  assertObject(rawConfig)\n  if (getNestedConfig(rawConfig)) {\n    fn(getConfig(rawConfig), getNestedConfig(rawConfig))\n  }\n}\n\nexport const processArgsToConfig = (args: any[]): [any[], any | void] => {\n  let metadata\n  onConfigNesting(args[0], (injected, config) => {\n    metadata = injected\n    args = config\n  })\n  return [args, metadata]\n}\n","import {Node, NodeUnit} from './index.h'\nimport {getGraph, getOwners, getLinks, getSubscribers, getMeta} from './getter'\nimport {is} from './is'\nimport {removeItem} from './collection'\nimport {CROSSLINK} from './tag'\n\nconst removeFromNode = (currentNode: Node, targetNode: Node) => {\n  removeItem(currentNode.next, targetNode)\n  removeItem(getOwners(currentNode), targetNode)\n  removeItem(getLinks(currentNode), targetNode)\n}\nconst clearNodeNormalized = (\n  targetNode: Node,\n  deep: boolean,\n  isDomainUnit: boolean,\n) => {\n  targetNode.next.length = 0\n  targetNode.seq.length = 0\n  //@ts-ignore\n  targetNode.scope = null\n  let currentNode\n  let list = getLinks(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (\n      deep ||\n      (isDomainUnit && !getMeta(targetNode, 'sample')) ||\n      currentNode.family.type === CROSSLINK\n    ) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        getMeta(currentNode, 'op') !== 'on' && isDomainUnit,\n      )\n    }\n  }\n  list = getOwners(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (isDomainUnit && currentNode.family.type === CROSSLINK) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        getMeta(currentNode, 'op') !== 'on' && isDomainUnit,\n      )\n    }\n  }\n}\nconst clearMap = (map: any) => map.clear()\nexport const clearNode = (\n  graphite: NodeUnit,\n  {\n    deep,\n  }: {\n    deep?: boolean\n  } = {},\n) => {\n  let isDomainUnit = false\n  //@ts-ignore\n  if (graphite.ownerSet) graphite.ownerSet.delete(graphite)\n  if (is.store(graphite)) {\n    clearMap(getSubscribers(graphite))\n  } else if (is.domain(graphite)) {\n    isDomainUnit = true\n    //@ts-ignore\n    const history = graphite.history\n    clearMap(history.events)\n    clearMap(history.effects)\n    clearMap(history.stores)\n    clearMap(history.domains)\n  }\n  clearNodeNormalized(getGraph(graphite), !!deep, isDomainUnit)\n}\n","import {Subscription, NodeUnit} from './index.h'\nimport {clearNode} from './clearNode'\n\nexport const createSubscription = (node: NodeUnit): Subscription => {\n  const result = () => clearNode(node)\n  result.unsubscribe = result\n  return result\n}\n","import {onConfigNesting} from './config'\nimport {createNode} from './createNode'\nimport {Subscription, NodeUnit, Cmd} from './index.h'\nimport {createSubscription} from './subscription'\nimport {assertNodeSet} from './is'\n\nexport const createLinkNode = (\n  parent: NodeUnit,\n  child: NodeUnit | NodeUnit[],\n  {\n    node,\n    scope,\n    meta,\n  }: {\n    node?: Array<Cmd | false | void | null>\n    scope?: {[name: string]: any}\n    meta?: {[name: string]: any}\n  },\n) =>\n  createNode({\n    node,\n    parent,\n    child,\n    scope,\n    meta,\n    family: {\n      owners: [parent, child],\n      links: child,\n    },\n    regional: true,\n  })\nexport const forward = (opts: {\n  from: NodeUnit | NodeUnit[]\n  to: NodeUnit | NodeUnit[]\n  meta?: Record<string, any>\n}): Subscription => {\n  let config\n  onConfigNesting(opts, (injectedData, userConfig) => {\n    config = injectedData\n    opts = userConfig\n  })\n  const {from, to, meta = {op: 'forward'}} = opts\n  assertNodeSet(from, 'forward', '\"from\"')\n  assertNodeSet(to, 'forward', '\"to\"')\n  if (config) meta.config = config\n  return createSubscription(\n    createNode({\n      parent: from,\n      child: to,\n      meta,\n      family: {},\n      regional: true,\n    }),\n  )\n}\n","import {step} from './typedef'\nimport {callStack} from './caller'\nimport {createNode} from './createNode'\nimport {Subscription, NodeUnit} from './index.h'\nimport {createSubscription} from './subscription'\nimport {throwError} from './throw'\nimport {isFunction} from './is'\n\nexport const watchUnit = (\n  unit: NodeUnit,\n  handler: (payload: any) => any,\n): Subscription => {\n  if (!isFunction(handler)) throwError('.watch argument should be a function')\n  return createSubscription(\n    createNode({\n      scope: {fn: handler},\n      node: [step.run({fn: callStack})],\n      parent: unit,\n      meta: {op: 'watch'},\n      family: {\n        owners: unit,\n      },\n      regional: true,\n    }),\n  )\n}\n","import {Store, Event, Effect, Domain} from './unit.h'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {Config, NodeUnit} from './index.h'\nimport {\n  createEvent,\n  createStore,\n  createNamedEvent,\n  initUnit,\n} from './createUnit'\nimport {createEffect} from './createEffect'\nimport {forward} from './forward'\nimport {forIn} from './collection'\nimport {getGraph, getParent} from './getter'\nimport {DOMAIN} from './tag'\nimport {launch} from './kernel'\nimport {step} from './typedef'\n\nconst createHook = (trigger: Event<any>, acc: Set<any>, node: any) => {\n  trigger.create = res => {\n    launch(trigger, res)\n    return res\n  }\n  getGraph(trigger).seq.push(\n    step.compute({\n      fn(upd, _, stack) {\n        stack.forkPage = null\n        return upd\n      },\n    }),\n  )\n  trigger.watch(data => {\n    own(node, [data])\n    acc.add(data)\n    if (!data.ownerSet) data.ownerSet = acc\n    if (!getParent(data)) data.parent = node\n  })\n  own(node, [trigger])\n  return (hook: (data: any) => any) => {\n    acc.forEach(hook)\n    return trigger.watch(hook)\n  }\n}\n\nexport function createDomain(nameOrConfig: any, maybeConfig?: any): Domain {\n  const domains: Set<Domain> = new Set()\n  const stores: Set<Store<any>> = new Set()\n  const effects: Set<Effect<any, any, any>> = new Set()\n  const events: Set<Event<any>> = new Set()\n\n  const node = createNode({\n    family: {type: DOMAIN},\n    regional: true,\n  })\n\n  const result: any = {\n    history: {\n      domains,\n      stores,\n      effects,\n      events,\n    },\n    graphite: node,\n  }\n\n  node.meta = initUnit(DOMAIN, result, maybeConfig, nameOrConfig)\n  const [event, effect, store, domain] = [\n    'onEvent',\n    'onEffect',\n    'onStore',\n    'onDomain',\n  ].map(createNamedEvent)\n\n  result.hooks = {\n    event,\n    effect,\n    store,\n    domain,\n  }\n  result.onCreateEvent = createHook(event, events, result)\n  result.onCreateEffect = createHook(effect, effects, result)\n  result.onCreateStore = createHook(store, stores, result)\n  result.onCreateDomain = createHook(domain, domains, result)\n\n  result.createEvent = result.event = (nameOrConfig: any, config?: Config) =>\n    event(\n      createEvent(nameOrConfig, {\n        parent: result,\n        config,\n      }),\n    )\n  result.createEffect = result.effect = (nameOrConfig: any, config?: Config) =>\n    effect(\n      createEffect(nameOrConfig, {\n        parent: result,\n        config,\n      }),\n    )\n  result.createDomain = result.domain = (nameOrConfig: any, config?: Config) =>\n    createDomain({\n      name: nameOrConfig,\n      parent: result,\n      config,\n    })\n  result.createStore = result.store = (state: any, config?: Config) =>\n    store(\n      createStore(state, {\n        parent: result,\n        config,\n      }),\n    )\n  const parent = getParent(result)\n  if (parent) {\n    forIn(result.hooks, (from: NodeUnit, key) => {\n      forward({from, to: parent.hooks[key]})\n    })\n    parent.hooks.domain(result)\n  }\n  return result\n}\n","import {Event} from './unit.h'\nimport {NodeUnit, Cmd} from './index.h'\nimport {is, isFunction, isObject} from './is'\nimport {forIn, includes} from './collection'\nimport {addRefOp, createStateRef} from './stateRef'\nimport {createLinkNode} from './forward'\nimport {processArgsToConfig} from './config'\nimport {step} from './typedef'\nimport {createNode} from './createNode'\nimport {launch} from './kernel'\nimport {getStoreState} from './getter'\nimport {REG_A} from './tag'\nimport {throwError} from './throw'\nimport {createEvent} from './createUnit'\nimport {applyTemplate} from './template'\n\nconst launchCase = (\n  scopeTargets: Record<string, NodeUnit>,\n  field: string,\n  data: any,\n  stack: any,\n) => {\n  const target = scopeTargets[field]\n  if (target) {\n    launch({\n      target,\n      params: Array.isArray(target) ? target.map(() => data) : data,\n      defer: true,\n      stack,\n    })\n  }\n}\n\nexport function split(...args: any[]): any {\n  let targets: Record<string, Event<any> | NodeUnit>\n  let [[source, match], metadata] = processArgsToConfig(args)\n  const knownCases = !match\n  if (knownCases) {\n    targets = source.cases\n    match = source.match\n    source = source.source\n  }\n  const matchIsUnit = is.store(match)\n  const matchIsFunction = !is.unit(match) && isFunction(match)\n  const matchIsShape = !matchIsUnit && !matchIsFunction && isObject(match)\n  if (!targets!) targets = {}\n  if (!knownCases) {\n    if (!matchIsShape) throwError('match should be an object')\n    forIn(match, (_, key) => {\n      //@ts-ignore\n      targets[key] = createEvent(metadata)\n    })\n    targets.__ = createEvent(metadata)\n  }\n  const owners = new Set(\n    ([] as NodeUnit[]).concat(source, Object.values(targets)),\n  )\n  const caseNames = Object.keys(\n    matchIsUnit || matchIsFunction ? targets : match,\n  )\n  let splitterSeq: Array<Cmd | false>\n  if (matchIsUnit || matchIsFunction) {\n    if (matchIsUnit) owners.add(match)\n    splitterSeq = [\n      matchIsUnit && step.barrier({priority: 'sampler'}),\n      matchIsUnit &&\n        step.mov({\n          store: getStoreState(match),\n          to: 'a',\n        }),\n      step.filter({\n        fn(data, scopeTargets, stack) {\n          const value = String(matchIsUnit ? stack.a : match(data))\n          launchCase(\n            scopeTargets,\n            includes(caseNames, value) ? value : '__',\n            data,\n            stack,\n          )\n        },\n      }),\n    ]\n  } else if (matchIsShape) {\n    const lastValues = createStateRef({})\n    lastValues.type = 'shape'\n    const updaterSteps = [\n      step.mov({\n        store: lastValues,\n        to: REG_A,\n      }),\n      step.compute({\n        fn(upd, {key}, {a}) {\n          a[key] = upd\n        },\n      }),\n    ]\n    const units = [] as string[]\n    let needBarrier: boolean\n    forIn(match, (storeOrFn: any, key) => {\n      if (is.unit(storeOrFn)) {\n        needBarrier = true\n        units.push(key)\n        owners.add(storeOrFn)\n        const updater = createLinkNode(storeOrFn, [], {\n          node: updaterSteps,\n          scope: {key},\n        })\n        if (is.store(storeOrFn)) {\n          lastValues.current[key] = storeOrFn.getState()\n          const storeRef = getStoreState(storeOrFn)\n          addRefOp(lastValues, {\n            type: 'field',\n            field: key,\n            from: storeRef,\n          })\n          applyTemplate('splitMatchStore', storeRef, updater)\n        }\n      }\n    })\n    if (needBarrier!) {\n      applyTemplate('splitBase', lastValues)\n    }\n    splitterSeq = [\n      needBarrier! && step.barrier({priority: 'sampler'}),\n      needBarrier! &&\n        step.mov({\n          store: lastValues,\n          to: 'a',\n        }),\n      step.filter({\n        fn(data, scopeTargets, stack) {\n          for (let i = 0; i < caseNames.length; i++) {\n            const caseName = caseNames[i]\n            const caseValue = includes(units, caseName)\n              ? stack.a[caseName]\n              : match[caseName](data)\n            if (caseValue) {\n              launchCase(scopeTargets, caseName, data, stack)\n              return\n            }\n          }\n          launchCase(scopeTargets, '__', data, stack)\n        },\n      }),\n    ]\n  } else {\n    throwError('expect match to be unit, function or object')\n  }\n  createNode({\n    meta: {op: 'split'},\n    parent: source,\n    scope: targets,\n    node: splitterSeq!,\n    family: {\n      type: 'crosslink',\n      owners: Array.from(owners),\n    },\n    regional: true,\n  })\n  if (!knownCases) return targets\n}\n","import {createDefer} from '../defer'\nimport {is} from '../is'\nimport {launch, forkPage} from '../kernel'\nimport {Scope} from '../unit.h'\n\nexport function allSettled(\n  start: any,\n  {scope, params: ctx}: {scope: Scope; params?: any},\n) {\n  if (!is.unit(start))\n    return Promise.reject(Error('first argument should be unit'))\n  const defer = createDefer()\n  //@ts-ignore\n  defer.parentFork = forkPage\n  const {fxCount} = scope\n  fxCount.scope.defers.push(defer)\n\n  const launchUnits = [start]\n  const launchParams = []\n  if (is.effect(start)) {\n    launchParams.push({\n      params: ctx,\n      req: {\n        rs(value: any) {\n          //@ts-ignore\n          defer.value = {status: 'done', value}\n        },\n        rj(value: any) {\n          //@ts-ignore\n          defer.value = {status: 'fail', value}\n        },\n      },\n    })\n  } else {\n    launchParams.push(ctx)\n  }\n  launchUnits.push(fxCount)\n  launchParams.push(null)\n  launch({\n    target: launchUnits,\n    params: launchParams,\n    forkPage: scope,\n  })\n  return defer.req\n}\n","import {combine} from './combine'\nimport {createEffect, onSettled} from './createEffect'\nimport {applyParentHook} from './createUnit'\nimport {onConfigNesting} from './config'\nimport {getGraph, getStoreState, setMeta} from './getter'\nimport {own} from './own'\nimport {is, isFunction} from './is'\nimport {step} from './typedef'\nimport {launch, Stack} from './kernel'\nimport {EFFECT, REG_A} from './tag'\n\nexport function attach(config: any) {\n  let injected\n  onConfigNesting(config, (injectedData, userConfig) => {\n    injected = injectedData\n    config = userConfig\n  })\n  let {source, effect, mapParams} = config\n  const isPlainFunction = !is.effect(effect) && isFunction(effect)\n  if (!mapParams)\n    mapParams =\n      source && !isPlainFunction\n        ? (_: any, source: any) => source\n        : (params: any) => params\n  if (isPlainFunction) {\n    const fn = effect\n    effect = createEffect(([params, state]: [any, any]) => fn(params, state))\n  }\n  const attached = createEffect(config, injected)\n  setMeta(attached, 'attached', true)\n  const {runner} = getGraph(attached).scope\n  let runnerSteps\n  const runnerFn = (\n    {params, req}: any,\n    {finally: anyway, effect, isPlain}: any,\n    stack: Stack,\n  ) => {\n    const rj = onSettled(params, req, false, anyway, stack)\n    let computedParams\n    try {\n      computedParams = mapParams(params, stack.a)\n    } catch (err) {\n      return rj(err)\n    }\n    launch({\n      target: effect,\n      params: {\n        params: isPlain ? [computedParams, stack.a] : computedParams,\n        req: {\n          rs: onSettled(params, req, true, anyway, stack),\n          rj,\n        },\n      },\n      page: stack.page,\n      defer: true,\n    })\n  }\n  if (source) {\n    let state\n    if (is.store(source)) {\n      state = source\n      own(source, [attached])\n    } else {\n      state = combine(source)\n      own(attached, [state])\n    }\n    runnerSteps = [\n      /* let another side-effects run first */\n      step.run({fn: _ => _}),\n      /* read state. assumed it already stable here because of previous step */\n      step.mov({\n        store: getStoreState(state),\n        to: REG_A,\n      }),\n      /* no need for step.run because of first step */\n      step.compute({fn: runnerFn}),\n    ]\n  } else {\n    runnerSteps = [step.run({fn: runnerFn})]\n  }\n  own(effect, [attached])\n  runner.scope.effect = effect\n  runner.scope.isPlain = isPlainFunction\n  runner.seq.splice(0, 1, ...runnerSteps)\n  applyParentHook(effect, attached, EFFECT)\n  return attached\n}\n","import {Store, Event} from './unit.h'\nimport {createEvent, applyParentHook} from './createUnit'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {processArgsToConfig} from './config'\n\nexport function createApi(...args: [Store<any>, {[key: string]: Function}]) {\n  let [[store, setters], metadata] = processArgsToConfig(args)\n  const result: Record<string, Event<any>> = {}\n  forIn(setters, (fn, key) => {\n    const event = (result[key] = createEvent(key, {\n      parent: getParent(store),\n      config: metadata,\n    }))\n    store.on(event, fn)\n    applyParentHook(store, event)\n  })\n  return result\n}\n","import {is} from '../is'\nimport {throwError} from '../throw'\nimport {Domain} from '../unit.h'\nimport {normalizeValues, cloneGraph} from './util'\nimport {getMeta} from '../getter'\n\nexport function fork(\n  domainOrConfig?: Domain | {values?: any; handlers?: any},\n  optiionalConfig?: {values?: any; handlers?: any},\n) {\n  let config: {values?: any; handlers?: any} | void = domainOrConfig as any\n  let domain: Domain\n  if (is.domain(domainOrConfig)) {\n    domain = domainOrConfig\n    config = optiionalConfig\n  }\n\n  const forked = cloneGraph(domain!)\n\n  if (config) {\n    if (config.values) {\n      const valuesSidMap = normalizeValues(\n        config.values,\n        unit =>\n          !is.store(unit) &&\n          throwError('Values map can contain only stores as keys'),\n      )\n      Object.assign(forked.sidValuesMap, valuesSidMap)\n    }\n    if (config.handlers) {\n      forked.handlers = normalizeValues(config.handlers, unit => {\n        if (!is.effect(unit))\n          throwError(`Handlers map can contain only effects as keys`)\n        if (getMeta(unit, 'attached'))\n          throwError('Handlers can`t accept attached effects')\n      })\n    }\n  }\n  return forked\n}\n","import {observableSymbol} from './observable'\nimport {Event} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {assertObject} from './is'\nimport {throwError} from './throw'\nimport {createSubscription} from './subscription'\n\nexport function fromObservable<T>(observable: any): Event<T> {\n  assertObject(observable)\n  const observableItem =\n    observableSymbol in observable ? observable[observableSymbol]() : observable\n  if (!observableItem.subscribe)\n    throwError('expect observable to have .subscribe')\n  const event = createEvent<T>()\n  const disposer = createSubscription(event)\n  observableItem.subscribe({\n    next: event,\n    error: disposer,\n    complete: disposer,\n  })\n  return event\n}\n","import {processArgsToConfig} from './config'\nimport {createLinkNode} from './forward'\nimport {sample} from './sample'\nimport {createEvent} from './createUnit'\nimport {combine} from './combine'\nimport {step} from './typedef'\nimport {callStack} from './caller'\nimport {assertNodeSet, is, isFunction} from './is'\nimport {createNode} from './createNode'\nimport {throwError} from './throw'\nimport {merge} from './merge'\n\nexport function guard(...args: any[]) {\n  const meta: Record<string, any> = {op: 'guard'}\n  let rawName = 'guard'\n  let [[source, config], metadata] = processArgsToConfig(args)\n  if (metadata) {\n    meta.config = metadata\n    if (metadata.name) rawName = metadata.name\n  }\n  if (!config) {\n    config = source\n    source = config.source\n  }\n  let {filter, greedy, clock, name = rawName} = config\n  const target = config.target || createEvent(name, meta.config)\n  const filterIsUnit = is.unit(filter)\n  let needToCombine = true\n  if (source === undefined) {\n    assertNodeSet(clock, 'guard', 'clock')\n    if (Array.isArray(clock)) {\n      clock = merge(clock)\n    }\n    source = clock\n    needToCombine = false\n  }\n  if (needToCombine && !is.unit(source)) source = combine(source)\n  if (clock) {\n    assertNodeSet(clock, 'guard', 'clock')\n    source = sample({\n      source,\n      clock,\n      greedy,\n      fn: filterIsUnit ? null : (source: any, clock: any) => ({source, clock}),\n    })\n  }\n  assertNodeSet(target, 'guard', 'target')\n  if (filterIsUnit) {\n    sample({\n      source: filter,\n      clock: source,\n      target: createNode({\n        node: [\n          step.filter({\n            fn: ({guard}) => guard,\n          }),\n          step.compute({\n            fn: ({data}) => data,\n          }),\n        ],\n        child: target,\n        meta,\n        family: {\n          owners: [source, filter, target, ...[].concat(clock ? clock : [])],\n          links: target,\n        },\n        regional: true,\n      }),\n      fn: (guard: any, data: any) => ({guard, data}),\n      greedy,\n      name,\n    })\n  } else {\n    if (!isFunction(filter)) throwError('`filter` should be function or unit')\n    createLinkNode(source, target, {\n      scope: {fn: filter},\n      node: clock\n        ? [\n            step.filter({\n              fn: ({source, clock}, {fn}) => fn(source, clock),\n            }),\n            step.compute({\n              fn: ({source}) => source,\n            }),\n          ]\n        : [step.filter({fn: callStack})],\n      meta,\n    })\n  }\n  return target\n}\n","import {is, isObject} from '../is'\nimport {throwError} from '../throw'\nimport {launch} from '../kernel'\nimport type {Domain, Scope} from '../unit.h'\nimport type {Node} from '../index.h'\nimport {forEach, includes} from '../collection'\nimport {STORE} from '../tag'\nimport {normalizeValues} from './util'\nimport {getGraph, getLinks, getMeta, getOwners} from '../getter'\n\nfunction traverse(root: Node, fn: (node: Node, sid: string) => void) {\n  const list = [] as Node[]\n  ;(function visit(node) {\n    if (includes(list, node)) return\n    list.push(node)\n    if (getMeta(node, 'unit') === STORE && getMeta(node, 'sid')) {\n      fn(node, getMeta(node, 'sid'))\n    }\n    forEach(node.next, visit)\n    forEach(getOwners(node), visit)\n    forEach(getLinks(node), visit)\n  })(root)\n}\n\n/**\n hydrate state on client\n\n const root = createDomain()\n hydrate(root, {\n  values: window.__initialState__\n})\n\n */\nexport function hydrate(domain: Domain | Scope, {values}: {values: any}) {\n  if (!isObject(values)) {\n    throwError('values property should be an object')\n  }\n  const normalizedValues = normalizeValues(values)\n  const valuesSidList = Object.getOwnPropertyNames(normalizedValues)\n  const storeNodes: Node[] = []\n  const storeValues: any[] = []\n  let forkPage: Scope\n  let traverseTarget: Node\n  if (is.scope(domain)) {\n    forkPage = domain\n    Object.assign(forkPage.sidValuesMap, normalizedValues)\n    if (!forkPage.cloneOf) throwError('scope should be created from domain')\n    traverseTarget = getGraph(forkPage.cloneOf)\n  } else if (is.domain(domain)) {\n    traverseTarget = getGraph(domain)\n  } else {\n    throwError('first argument of hydrate should be domain or scope')\n  }\n  traverse(traverseTarget!, (node, sid) => {\n    // forkPage.sidIdMap[sid] = node.scope.state.id\n    if (includes(valuesSidList, sid)) {\n      storeNodes.push(node)\n      storeValues.push(normalizedValues[sid])\n    }\n  })\n  launch({\n    target: storeNodes,\n    params: storeValues,\n    forkPage: forkPage!,\n  })\n}\n","import {createStore} from './createUnit'\nimport {is} from './is'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {OPEN_O} from './tag'\nimport {forward} from './forward'\n\nexport function restore(obj: any, defaultState: any, config?: any): any {\n  if (is.store(obj)) {\n    return obj\n  }\n  if (is.unit(obj)) {\n    const domain = getParent(obj)\n    let result\n    if (is.event(obj)) {\n      result = createStore(defaultState, {\n        parent: domain,\n        name: obj.shortName,\n        [OPEN_O]: config,\n      }).on(obj, (_, v) => v)\n    }\n    if (is.effect(obj)) {\n      result = createStore(defaultState, {\n        parent: domain,\n        name: obj.shortName,\n        [OPEN_O]: config,\n      })\n      forward({from: obj.doneData, to: result})\n    }\n    if (domain) domain.hooks.store(result)\n    return result\n  }\n  const result: Record<string, any> = Array.isArray(obj) ? [] : {}\n  forIn(obj, (value, key) => {\n    result[key] = is.store(value) ? value : createStore(value, {name: key})\n  })\n  return result\n}\n","import {createDefer} from '../defer'\nimport {is} from '../is'\nimport {throwError} from '../throw'\nimport {launch, forkPage} from '../kernel'\nimport {Scope} from '../unit.h'\n\n/** bind event to scope */\nexport function scopeBind(unit: any, {scope}: {scope?: Scope} = {}) {\n  if (!scope && !forkPage) {\n    throwError('scopeBind cannot be called outside of forked .watch')\n  }\n  const savedForkPage = scope || forkPage!\n  return is.effect(unit)\n    ? (params: any) => {\n        const req = createDefer()\n        launch({\n          target: unit,\n          params: {\n            params,\n            req,\n          },\n          forkPage: savedForkPage,\n        })\n        return req.req\n      }\n    : (params: any) => {\n        launch({target: unit, params, forkPage: savedForkPage})\n        return params\n      }\n}\n","import type {Scope, Store} from '../unit.h'\nimport {forIn} from '../collection'\n\n/**\n serialize state on server\n */\nexport function serialize(\n  scope: Scope,\n  {ignore = []}: {ignore?: Array<Store<any>>} = {},\n) {\n  const ignoredStores = ignore.map(({sid}) => sid)\n  const result = {} as Record<string, any>\n  forIn(scope.sidValuesMap, (value, sid) => {\n    if (ignoredStores.includes(sid)) return\n    const id = scope.sidIdMap[sid]\n    // if (!scope.changedStores.has(id)) return\n    if (id && id in scope.reg) {\n      result[sid] = scope.reg[id].current\n    } else {\n      result[sid] = value\n    }\n  })\n  return result\n}\n"],"names":["assertNodeSetItem","value","method","valueName","reason","isObject","isFunction","throwError","assertNodeSet","Array","isArray","i","length","withRegion","unit","cb","regionStack","parent","template","getMeta","readTemplate","sidRoot","getParent","createNode","node","child","to","target","scope","meta","family","familyRaw","type","regional","sources","arrifyNodes","from","source","links","owners","seq","item","push","result","id","nextNodeID","next","getOwners","getLinks","own","getValue","forIn","obj","key","forEach","list","fn","launch","payload","upsert","pageForLaunch","currentPage","stackForLaunch","forkPageForLaunch","forkPage","params","defer","page","getForkPage","pushFirstHeapItem","getGraph","isRoot","stop","skip","reg","lastStartedState","isWatch","kernelLoop","deleteMin","idx","stack","hasPageReg","hasScopeReg","local","fail","stepn","step","data","priority","barrierID","fullID","barriers","has","add","pushHeap","delete","STACK","store","STORE","pageForRef","getPageForRef","initRefInScope","undefined","readRef","getPageRef","current","tryRun","fxCount","storeChange","additionalLinks","unitObjectName","objOrArr","name","comma","is","getCompostite","fullName","toString","createName","path","shortName","composite","concat","applyTemplate","handlers","args","callCreate","oldPage","setCurrentPage","create","createEvent","nameOrConfig","maybeConfig","event","graphite","initUnit","watch","bind","watchUnit","map","deriveEvent","callStack","filter","filterMap","defined","prepend","contramapped","createLinkNode","op","applyParentHook","createStore","defaultState","props","onEvent","off","getSubscribers","set","createSubscription","updateStore","updateFilter","plainState","createStateRef","oldState","updates","createNamedEvent","plainStateId","subscribers","Map","stateRef","getState","reachedPage","targetRef","setState","state","reset","units","on","nodeSet","currentSubscription","get","firstState","config","lastResult","console","error","storeState","innerStore","strict","linkNode","addRefOp","getStoreState","noInit","eventOrFn","subscription","defaultConfig","changed","update","_","a","sid","isStrict","combine","handler","stores","onConfigNesting","injectedData","userConfig","structStoreShape","shapeReady","noArraySpread","rawHandler","slice","storeCombination","createDefer","req","Promise","rs","rj","catch","createEffect","instance","getType","setMeta","kind","use","anyway","finally","done","named","status","doneData","failData","effectRunner","getHandler","getCurrent","handlerId","onResolve","onSettled","onReject","err","then","fx","runner","upd","savedFork","setForkPage","inFlight","x","pending","amount","merge","events","forward","validateSampleConfig","atLeastOneFieldExists","sampleConfigFields","field","sample","greedy","processArgsToConfig","clock","metadata","needToCombine","isUpward","initialState","sourceRef","callARegStack","hasSource","sourceState","clockState","callStackAReg","normalizeValues","values","assertEach","observableSymbol","Symbol","observable","effect","domain","message","Error","assertObject","idCount","nextUnitID","nextStepID","cmd","nextBarrierID","barrier","mov","check","compute","run","ref","before","graph","getConfig","opts","getNestedConfig","val","ownerUnit","owner","link","readSidRoot","flat","includes","removeItem","pos","indexOf","splice","heap","b","ret","isSameType","v","r","l","queue","ix","first","last","size","getPriority","bucket","t","Set","newForkPage","newPage","isGetState","refsMap","sidIdMap","sidValuesMap","isFresh","compositeName","rawConfig","injected","removeFromNode","currentNode","targetNode","clearNodeNormalized","deep","isDomainUnit","pop","clearMap","clear","clearNode","ownerSet","history","effects","domains","unsubscribe","normalizeConfig","part","loc","hookType","hooks","rawConfigA","rawConfigB","isDomain","unitId","thru","subscribe","observer","nativeTemplate","mapped","stateFirst","storeRef","needSpread","clone","stateNew","rawShape","storeStateRef","spread","childRef","defaultShape","ok","sidechain","createHook","trigger","acc","res","hook","launchCase","scopeTargets","start","ctx","reject","parentFork","defers","launchUnits","launchParams","mapParams","isPlainFunction","attached","runnerSteps","runnerFn","computedParams","isPlain","setters","createDomain","onCreateEvent","onCreateEffect","onCreateStore","onCreateDomain","domainOrConfig","optiionalConfig","forked","forkInFlightCounter","fxID","resolve","__","storeStack","storeNode","resultScope","cloneOf","stateGetter","cloneGraph","valuesSidMap","Object","assign","observableItem","disposer","complete","rawName","filterIsUnit","guard","traverseTarget","normalizedValues","valuesSidList","getOwnPropertyNames","storeNodes","storeValues","visit","savedForkPage","ignore","ignoredStores","targets","match","knownCases","cases","matchIsUnit","matchIsFunction","matchIsShape","splitterSeq","caseNames","keys","String","lastValues","needBarrier","updaterSteps","storeOrFn","updater","caseName"],"mappings":"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"}