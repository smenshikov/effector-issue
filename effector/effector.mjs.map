{"version":3,"file":"effector.mjs","sources":["effector/is.ts","effector/region.ts","effector/createNode.ts","effector/tag.ts","effector/collection.ts","effector/kernel.ts","effector/naming.ts","effector/template.ts","effector/createUnit.ts","effector/combine.ts","effector/defer.ts","effector/createEffect.ts","effector/attach.ts","effector/createApi.ts","effector/createDomain.ts","effector/fromObservable.ts","effector/merge.ts","effector/sample.ts","effector/guard.ts","effector/restore.ts","effector/split.ts","effector/fork/allSettled.ts","effector/fork/util.ts","effector/fork/fork.ts","effector/fork/hydrate.ts","effector/fork/scopeBind.ts","effector/fork/serialize.ts","effector/observable.ts","effector/validate.ts","effector/throw.ts","effector/id.ts","effector/bind.ts","effector/step.ts","effector/stateRef.ts","effector/caller.ts","effector/getter.ts","effector/own.ts","effector/config.ts","effector/clearNode.ts","effector/subscription.ts","effector/forward.ts","effector/watch.ts"],"sourcesContent":["//eslint-disable-next-line\nexport * as is from './validate'\nimport {throwError} from './throw'\n\nexport const isObject = (value: any) =>\n  typeof value === 'object' && value !== null\nexport const isFunction = (value: any) => typeof value === 'function'\n\nexport const assertObject = (value: any) => {\n  if (!isObject(value) && !isFunction(value))\n    throwError('expect first argument be an object') // or function\n}\n\nfunction assertNodeSetItem(value: any, method: string, valueName: string, reason: string) {\n  if ((!isObject(value) && !isFunction(value)) || (!('family' in value) && !('graphite' in value))) {\n    throwError(`${method}: expect ${valueName} to be a unit (store, event or effect)${reason}`)\n  }\n}\nexport function assertNodeSet(value: any, method: string, valueName: string) {\n  if (Array.isArray(value)) {\n    for (let i = 0; i < value.length; i++) {\n      const item = value[i]\n      assertNodeSetItem(item, method, `${i} item of ${valueName}`, '')\n    }\n  } else {\n    assertNodeSetItem(value, method, valueName, ' or array of units')\n  }\n}\n","import {getValue, getGraph, getParent, getMeta} from './getter'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport type {Template} from '../forest/index.h'\nimport {OPEN_O} from './tag'\n\ntype RegionStack = {\n  parent: RegionStack | null\n  value: any\n  template: any\n  sidRoot?: string\n}\n\nexport let regionStack: RegionStack | null = null\n\nexport const readTemplate = (): Template | null =>\n  regionStack && regionStack.template\nexport const readSidRoot = (sid?: string | null) => {\n  if (sid && regionStack && regionStack.sidRoot)\n    sid = `${regionStack.sidRoot}${OPEN_O}${sid}`\n  return sid\n}\n\nexport function withRegion(unit: any, cb: () => void) {\n  regionStack = {\n    parent: regionStack,\n    value: unit,\n    template: getMeta(unit, 'template') || readTemplate(),\n    sidRoot: getMeta(unit, 'sidRoot') || (regionStack && regionStack.sidRoot),\n  }\n  try {\n    return cb()\n  } finally {\n    regionStack = getParent(regionStack)\n  }\n}\n\nexport const withFactory = ({\n  sid,\n  name,\n  loc,\n  method,\n  fn,\n}: {\n  sid: string\n  name?: string\n  loc?: any\n  method?: string\n  fn: () => any\n}) => {\n  const sidNode = createNode({\n    meta: {\n      sidRoot: readSidRoot(sid),\n      name,\n      loc,\n      method,\n    },\n  })\n  return withRegion(sidNode, fn)\n}\n","import {Node, NodeUnit, Cmd, StateRef} from './index.h'\nimport {getGraph, getOwners, getLinks, getValue} from './getter'\nimport {nextNodeID} from './id'\nimport {CROSSLINK, STORE} from './tag'\nimport {regionStack} from './region'\nimport {own} from './own'\n\nconst arrifyNodes = (\n  list: NodeUnit | Array<NodeUnit | NodeUnit[]> = [],\n): Node[] => (Array.isArray(list) ? list : [list]).flat().map(getGraph)\n\nexport function createNode({\n  node = [],\n  from,\n  source,\n  parent = from || source,\n  to,\n  target,\n  child = to || target,\n  scope = {},\n  meta = {},\n  family: familyRaw = {type: 'regular'},\n  regional,\n}: {\n  node?: Array<Cmd | false | void | null>\n  from?: NodeUnit | NodeUnit[]\n  source?: NodeUnit | NodeUnit[]\n  parent?: NodeUnit | NodeUnit[]\n  to?: NodeUnit | NodeUnit[]\n  target?: NodeUnit | NodeUnit[]\n  child?: NodeUnit | NodeUnit[]\n  scope?: {[name: string]: any}\n  meta?: {[name: string]: any}\n  family?: {\n    type?: 'regular' | 'crosslink' | 'domain'\n    links?: NodeUnit | NodeUnit[]\n    owners?: NodeUnit | Array<NodeUnit | NodeUnit[]>\n  }\n  regional?: boolean\n} = {}): Node {\n  const sources = arrifyNodes(parent)\n  const links = arrifyNodes(familyRaw.links)\n  const owners = arrifyNodes(familyRaw.owners)\n  const seq: Cmd[] = []\n  for (let i = 0; i < node.length; i++) {\n    const item = node[i]\n    if (!item) continue\n    seq.push(item)\n  }\n  const result: Node = {\n    id: nextNodeID(),\n    seq,\n    next: arrifyNodes(child),\n    meta,\n    scope,\n    family: {\n      type: familyRaw.type || CROSSLINK,\n      links,\n      owners,\n    },\n  }\n  for (let i = 0; i < links.length; i++) {\n    getOwners(links[i]).push(result)\n  }\n  for (let i = 0; i < owners.length; i++) {\n    getLinks(owners[i]).push(result)\n  }\n  for (let i = 0; i < sources.length; i++) {\n    sources[i].next.push(result)\n  }\n  if (regional && regionStack) {\n    own(getValue(regionStack), [result])\n  }\n  return result\n}\n","export const STORE = 'store'\nexport const EVENT = 'event'\nexport const EFFECT = 'effect'\nexport const DOMAIN = 'domain'\nexport const SCOPE = 'scope'\nexport const SAMPLER = 'sampler'\nexport const CROSSLINK = 'crosslink'\nexport const MAP = 'map'\nexport const STACK = 'stack'\nexport const BARRIER = 'barrier'\nexport const VALUE = 'value'\nexport const FORK_COUNTER = 'forkInFlightCounter'\nexport const SAMPLE = 'sample'\nexport const FILTER = 'filter'\nexport const REG_A = 'a'\nexport const OPEN_O = `\\u0254`\n","export function forIn<T>(\n  obj: Record<string, T>,\n  cb: (value: T, key: string) => void,\n) {\n  for (const key in obj) {\n    cb(obj[key], key)\n  }\n}\n\nexport const includes = (list: any[], item: any) => list.includes(item)\n\nexport const removeItem = (list: any[], item: any) => {\n  const pos = list.indexOf(item)\n  if (pos !== -1) {\n    list.splice(pos, 1)\n  }\n}\n\nexport function forEach<T>(\n  list: T[],\n  fn: (item: T, index: number, list: T[]) => void,\n): void\nexport function forEach<T>(list: Set<T>, fn: (item: T) => void): void\nexport function forEach(list: any, fn: Function) {\n  list.forEach(fn)\n}\n","import type {Leaf} from '../forest/index.h'\n\nimport type {Cmd, Node, NodeUnit, StateRef} from './index.h'\nimport {readRef} from './stateRef'\nimport {getForkPage, getGraph, getMeta, getParent, getValue} from './getter'\nimport {\n  STORE,\n  EFFECT,\n  SAMPLER,\n  STACK,\n  BARRIER,\n  VALUE,\n  FILTER,\n  REG_A,\n  MAP,\n} from './tag'\nimport type {Scope} from './unit.h'\nimport {forEach} from './collection'\n\n/** Names of priority groups */\ntype PriorityTag = 'child' | 'pure' | 'barrier' | 'sampler' | 'effect'\n\n/**\n * Position in the current branch,\n * including call stack, priority type\n * and index of next step in the executed Node\n */\ntype Layer = {\n  idx: number\n  stack: Stack\n  type: PriorityTag\n  id: number\n}\n\n/** Call stack */\nexport type Stack = {\n  value: any\n  a: any\n  b: any\n  parent: Stack | null\n  node: Node\n  page: Leaf | null\n  forkPage?: Scope | null | void\n}\n\n/** Queue as linked list or skew heap */\ntype QueueItem = {\n  /** node value */\n  v: Layer\n  /** left node. always null in queue but used in skew heap */\n  l: QueueItem | null\n  /** right node */\n  r: QueueItem | null\n}\ntype QueueBucket = {\n  first: QueueItem | null\n  last: QueueItem | null\n  size: number\n}\n\n/** Dedicated local metadata */\ntype Local = {\n  fail: boolean\n  scope: {[key: string]: any}\n}\n\nlet heap: QueueItem | null = null\n\nconst merge = (a: QueueItem | null, b: QueueItem | null): QueueItem | null => {\n  if (!a) return b\n  if (!b) return a\n\n  let ret\n  const isSameType = a.v.type === b.v.type\n  if (\n    /**\n     * if both nodes has the same PriorityType\n     * and first node is created after second one\n     */\n    (isSameType && a.v.id > b.v.id) ||\n    /** if first node is \"sampler\" and second node is \"barrier\" */\n    (!isSameType && a.v.type === SAMPLER)\n  ) {\n    ret = a\n    a = b\n    b = ret\n  }\n  ret = merge(a.r, b)\n  a.r = a.l\n  a.l = ret\n\n  return a\n}\n\n/** queue buckets for each PriorityType */\nconst queue: QueueBucket[] = []\nlet ix = 0\nwhile (ix < 5) {\n  /**\n   * although \"sampler\" and \"barrier\" are using heap instead of linked list,\n   * their buckets are still useful: they maintains size of heap queue\n   */\n  queue.push({first: null, last: null, size: 0})\n  ix += 1\n}\n\nconst deleteMin = () => {\n  for (let i = 0; i < 5; i++) {\n    const list = queue[i]\n    if (list.size > 0) {\n      /**\n       * second bucket is for \"barrier\" PriorityType (used in combine)\n       * and third bucket is for \"sampler\" PriorityType (used in sample and guard)\n       */\n      if (i === 2 || i === 3) {\n        list.size -= 1\n        const value = heap!.v\n        heap = merge(heap!.l, heap!.r)\n        return value\n      }\n      if (list.size === 1) {\n        list.last = null\n      }\n      const item = list.first\n      list.first = item!.r\n      list.size -= 1\n      return item!.v\n    }\n  }\n}\nconst pushFirstHeapItem = (\n  type: PriorityTag,\n  page: Leaf | null,\n  node: Node,\n  parent: Stack | null,\n  value: any,\n  forkPage?: Scope | null | void,\n) =>\n  pushHeap(\n    0,\n    {\n      a: null,\n      b: null,\n      node,\n      parent,\n      value,\n      page,\n      forkPage,\n    },\n    type,\n  )\nconst pushHeap = (\n  idx: number,\n  stack: Stack,\n  type: PriorityTag,\n  id: number = 0,\n) => {\n  const priority = getPriority(type)\n  const bucket: QueueBucket = queue[priority]\n  const item: QueueItem = {\n    v: {\n      idx,\n      stack,\n      type,\n      id,\n    },\n    l: null,\n    r: null,\n  }\n  /**\n   * second bucket is for \"barrier\" PriorityType (used in combine)\n   * and third bucket is for \"sampler\" PriorityType (used in sample and guard)\n   */\n  if (priority === 2 || priority === 3) {\n    heap = merge(heap, item)\n  } else {\n    if (bucket.size === 0) {\n      bucket.first = item\n    } else {\n      bucket.last!.r = item\n    }\n    bucket.last = item\n  }\n  bucket.size += 1\n}\n\nconst getPriority = (t: PriorityTag) => {\n  switch (t) {\n    case 'child':\n      return 0\n    case 'pure':\n      return 1\n    case BARRIER:\n      return 2\n    case SAMPLER:\n      return 3\n    case EFFECT:\n      return 4\n    default:\n      return -1\n  }\n}\n\nconst barriers = new Set<string | number>()\n\nlet isRoot = true\nexport let isWatch = false\nexport let currentPage: Leaf | null = null\nexport let forkPage: Scope | void | null\nexport const setForkPage = (newForkPage: Scope) => {\n  forkPage = newForkPage\n}\nexport const setCurrentPage = (newPage: Leaf | null) => {\n  currentPage = newPage\n}\n\nconst getPageForRef = (page: Leaf | null, id: string) => {\n  if (page) {\n    while (page && !page.reg[id]) {\n      page = getParent(page)\n    }\n    if (page) return page\n  }\n  return null\n}\nexport const getPageRef = (\n  page: Leaf | null,\n  forkPage: Scope | null | void,\n  node: Node | null,\n  ref: StateRef,\n  isGetState?: boolean,\n) => {\n  const pageForRef = getPageForRef(page, ref.id)\n  if (pageForRef) return pageForRef.reg[ref.id]\n  if (forkPage) {\n    initRefInScope(forkPage!, ref, isGetState)\n    return forkPage.reg[ref.id]\n  }\n  return ref\n}\n\nexport function launch(config: {\n  target: NodeUnit | NodeUnit[]\n  params?: any\n  defer?: boolean\n  page?: Leaf | void | null\n  forkPage?: Scope | void\n  stack?: Stack | void\n}): void\nexport function launch(unit: NodeUnit, payload?: any, upsert?: boolean): void\nexport function launch(unit: any, payload?: any, upsert?: boolean) {\n  let pageForLaunch = currentPage\n  let stackForLaunch = null\n  let forkPageForLaunch = forkPage\n  if (unit.target) {\n    payload = unit.params\n    upsert = unit.defer\n    pageForLaunch = 'page' in unit ? unit.page : pageForLaunch\n    if (unit[STACK]) stackForLaunch = unit[STACK]\n    forkPageForLaunch = getForkPage(unit) || forkPageForLaunch\n    unit = unit.target\n  }\n  if (forkPageForLaunch && forkPage && forkPageForLaunch !== forkPage) {\n    forkPage = null\n  }\n  if (Array.isArray(unit)) {\n    for (let i = 0; i < unit.length; i++) {\n      pushFirstHeapItem(\n        'pure',\n        pageForLaunch,\n        getGraph(unit[i]),\n        stackForLaunch,\n        payload[i],\n        forkPageForLaunch,\n      )\n    }\n  } else {\n    pushFirstHeapItem(\n      'pure',\n      pageForLaunch,\n      getGraph(unit),\n      stackForLaunch,\n      payload,\n      forkPageForLaunch,\n    )\n  }\n  if (upsert && !isRoot) return\n  /** main execution code */\n  const lastStartedState = {isRoot, currentPage, forkPage, isWatch}\n  isRoot = false\n  let stop: boolean\n  let skip: boolean\n  let node: Node\n  let value\n  let page: Leaf | null\n  let reg: Record<string, StateRef> | void\n  kernelLoop: while ((value = deleteMin())) {\n    const {idx, stack, type} = value\n    node = stack.node\n    currentPage = page = stack.page\n    forkPage = getForkPage(stack)\n    if (page) reg = page.reg\n    else if (forkPage) reg = forkPage.reg\n    // reg = (page ? page : forkPage ? forkPage : node).reg\n    const hasPageReg = !!page\n    const hasScopeReg = !!forkPage\n    const local: Local = {\n      fail: false,\n      scope: node.scope,\n    }\n    stop = skip = false\n    for (let stepn = idx; stepn < node.seq.length && !stop; stepn++) {\n      const step = node.seq[stepn]\n      switch (step.type) {\n        case BARRIER: {\n          const {priority, barrierID} = step.data\n          const id = page ? `${page.fullID}_${barrierID}` : barrierID\n          if (stepn !== idx || type !== priority) {\n            if (!barriers.has(id)) {\n              barriers.add(id)\n              pushHeap(stepn, stack, priority, barrierID)\n            }\n            continue kernelLoop\n          }\n          barriers.delete(id)\n          break\n        }\n        case 'mov': {\n          const data = step.data\n          let value\n          //prettier-ignore\n          switch (data.from) {\n            case STACK: value = getValue(stack); break\n            case REG_A: /** fall-through case */\n            case 'b':\n              value = stack[data.from]\n              break\n            case VALUE: value = data.store; break\n            case STORE:\n              if (reg && !reg[data.store.id]) {\n                // if (!page.parent) {\n                if (hasPageReg) {\n                  const pageForRef = getPageForRef(page, data.store.id)\n                  stack.page = page = pageForRef\n                  if (pageForRef) {\n                    reg = pageForRef.reg\n                  } else if (hasScopeReg) {\n                    initRefInScope(forkPage!, data.store)\n                    reg = forkPage!.reg\n                  } else {\n                    reg = undefined //node.reg\n                  }\n                } else if (hasScopeReg) {\n                  /** StateRef in Scope.reg created only when needed */\n                  initRefInScope(forkPage!, data.store)\n                } else {\n                  // console.error('should not happen')\n                  /** StateRef should exists at least in Node itself, but it is not found */\n                }\n                // }\n              }\n              // value = getPageRef(page, forkPage, node, data.store.id).current\n              value = readRef(reg ? reg[data.store.id] || data.store : data.store)\n              break\n          }\n          //prettier-ignore\n          switch (data.to) {\n            case STACK: stack.value = value; break\n            case REG_A: /** fall-through case */\n            case 'b':\n              stack[data.to] = value\n              break\n            case STORE:\n              getPageRef(page, forkPage, node, data.target).current = value\n              break\n          }\n          break\n        }\n        case 'check': {\n          skip =\n            getValue(stack) ===\n            (step.data.type === 'defined'\n              ? undefined\n              : readRef(getPageRef(page, forkPage, node, step.data.store)))\n          break\n        }\n        case FILTER:\n          /**\n           * handled edge case: if step.fn will throw,\n           * tryRun will return null\n           * thereby forcing that branch to stop\n           */\n          skip = !tryRun(local, step.data, stack)\n          break\n        case 'run':\n          /** exec 'compute' step when stepn === idx */\n          if (stepn !== idx || type !== EFFECT) {\n            pushHeap(stepn, stack, EFFECT)\n            continue kernelLoop\n          }\n        case 'compute':\n          isWatch = getMeta(node, 'op') === 'watch'\n          stack.value = tryRun(local, step.data, stack)\n          isWatch = lastStartedState.isWatch\n          break\n      }\n      stop = local.fail || skip\n    }\n    if (!stop) {\n      for (let stepn = 0; stepn < node.next.length; stepn++) {\n        pushFirstHeapItem(\n          'child',\n          page,\n          node.next[stepn],\n          stack,\n          getValue(stack),\n          getForkPage(stack),\n        )\n      }\n      const forkPage: Scope | null = getForkPage(stack)\n      if (forkPage) {\n        if (getMeta(node, 'needFxCounter'))\n          pushFirstHeapItem('child', page, forkPage.fxCount, stack, 0, forkPage)\n        if (getMeta(node, 'storeChange'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.storeChange,\n            stack,\n            0,\n            forkPage,\n          )\n        const additionalLinks = forkPage.additionalLinks[node.id]\n        if (additionalLinks) {\n          for (let stepn = 0; stepn < additionalLinks.length; stepn++) {\n            pushFirstHeapItem(\n              'child',\n              page,\n              additionalLinks[stepn],\n              stack,\n              getValue(stack),\n              forkPage,\n            )\n          }\n        }\n      }\n    }\n  }\n  isRoot = lastStartedState.isRoot\n  currentPage = lastStartedState.currentPage\n  forkPage = getForkPage(lastStartedState)\n}\n\nexport const initRefInScope = (\n  scope: {\n    reg: Record<string, StateRef>\n    sidValuesMap: Record<string, any>\n    sidIdMap: Record<string, string>\n  },\n  sourceRef: StateRef,\n  isGetState?: boolean,\n) => {\n  const refsMap = scope.reg\n  if (refsMap[sourceRef.id]) return\n  const ref: StateRef = {\n    id: sourceRef.id,\n    current: sourceRef.current,\n  }\n  if (sourceRef.sid) scope.sidIdMap[sourceRef.sid] = sourceRef.id\n  if (sourceRef.sid && sourceRef.sid in scope.sidValuesMap) {\n    ref.current = scope.sidValuesMap[sourceRef.sid]\n  } else {\n    const noInit = !isGetState && sourceRef.noInit\n    if (!noInit && sourceRef.before) {\n      let isFresh = false\n      forEach(sourceRef.before, cmd => {\n        switch (cmd.type) {\n          case MAP: {\n            const from = cmd.from\n            if (from || cmd.fn) {\n              if (from) initRefInScope(scope, from, isGetState)\n              const value = from && refsMap[from.id].current\n              ref.current = cmd.fn ? cmd.fn(value) : value\n            }\n            break\n          }\n          case 'field': {\n            initRefInScope(scope, cmd.from, isGetState)\n            const from = refsMap[cmd.from.id]\n            if (!isFresh) {\n              isFresh = true\n              if (Array.isArray(ref.current)) {\n                ref.current = [...ref.current]\n              } else {\n                ref.current = {...ref.current}\n              }\n            }\n            ref.current[cmd.field] = refsMap[from.id].current\n            break\n          }\n          case 'closure':\n            break\n        }\n      })\n    }\n  }\n  refsMap[sourceRef.id] = ref\n}\n\n/** try catch for external functions */\nconst tryRun = (\n  local: Local,\n  {fn}: Extract<Cmd, {data: {fn: Function}}>['data'],\n  stack: Stack,\n) => {\n  try {\n    return fn(getValue(stack), local.scope, stack)\n  } catch (err) {\n    console.error(err)\n    local.fail = true\n  }\n}\n","import type {Store, Domain} from './unit.h'\nimport {is} from './is'\nimport {getParent} from './getter'\nimport {forIn} from './collection'\n\nconst getCompostite = (unit: any): CompositeName => unit.compositeName\n\nexport function unitObjectName(objOrArr: any, method: string = 'combine') {\n  let name = method + '('\n  let comma = ''\n  let i = 0\n  forIn(objOrArr, (unit: any) => {\n    /* inlined max object names constant */\n    if (i < 25) {\n      if (unit != null) {\n        name += comma\n        name += is.unit(unit) ? getCompostite(unit).fullName : unit.toString()\n      }\n      i += 1\n      comma = ', '\n    }\n  })\n  return name + ')'\n}\n\nexport function setStoreName<State>(store: Store<State>, rawName: string) {\n  store.shortName = rawName\n  Object.assign(getCompostite(store), createName(rawName, getParent(store)))\n}\n\nexport type CompositeName = {\n  shortName: string\n  fullName: string\n  path: string[]\n}\n\nexport function createName(name: string, parent?: Domain): CompositeName {\n  let path: string[]\n  let fullName\n  const shortName = name\n  if (!parent) {\n    path = name.length === 0 ? [] : [name]\n    fullName = name\n  } else {\n    const composite = getCompostite(parent)\n    if (name.length === 0) {\n      path = composite.path\n      fullName = composite.fullName\n    } else {\n      path = composite.path.concat([name])\n      fullName =\n        composite.fullName.length === 0\n          ? name\n          : '' + composite.fullName + '/' + name\n    }\n  }\n  return {shortName, fullName, path}\n}\n","import {readTemplate} from './region'\nimport type {Template, TemplateHandlers} from '../forest/index.h'\n\nexport function applyTemplate<K extends keyof TemplateHandlers>(\n  method: K,\n  ...args: Parameters<TemplateHandlers[K]> extends [Template, ...infer Args]\n    ? Args\n    : never\n): ReturnType<TemplateHandlers[K]> | void {\n  const template = readTemplate()\n  if (template) {\n    const fn: any = template.handlers[method]\n    if (fn) return fn(template, ...args)\n  }\n}\n","import {observableSymbol} from './observable'\n\nimport {is, isObject, isFunction, assertObject, assertNodeSet} from './is'\nimport type {Store, Event} from './unit.h'\n\nimport {step} from './typedef'\nimport {createStateRef, readRef, addRefOp} from './stateRef'\nimport {nextUnitID} from './id'\nimport {callStackAReg, callARegStack, callStack} from './caller'\nimport {bind} from './bind'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {\n  launch,\n  currentPage,\n  forkPage,\n  setCurrentPage,\n  initRefInScope,\n} from './kernel'\n\nimport {Subscriber, Config} from './index.h'\nimport {createName} from './naming'\nimport {createLinkNode} from './forward'\nimport {watchUnit} from './watch'\nimport {createSubscription} from './subscription'\nimport {readTemplate, readSidRoot} from './region'\nimport {\n  getSubscribers,\n  getConfig,\n  getNestedConfig,\n  getStoreState,\n  getGraph,\n  getParent,\n} from './getter'\nimport {throwError} from './throw'\nimport {DOMAIN, STORE, EVENT, MAP, FILTER, REG_A, OPEN_O} from './tag'\nimport {applyTemplate} from './template'\n\nconst normalizeConfig = (part: any, config: any) => {\n  if (isObject(part)) {\n    normalizeConfig(getConfig(part), config)\n    if (part.name != null) {\n      if (isObject(part.name)) normalizeConfig(part.name, config)\n      else if (isFunction(part.name)) config.handler = part.name\n      else config.name = part.name\n    }\n    if (part.loc) config.loc = part.loc\n    if (part.sid || part.sid === null) config.sid = part.sid\n    if (part.handler) config.handler = part.handler\n    if (part.updateFilter) config.updateFilter = part.updateFilter\n    if (getParent(part)) config.parent = getParent(part)\n    if ('strict' in part) config.strict = part.strict\n    if (part.named) config.named = part.named\n    normalizeConfig(getNestedConfig(part), config)\n  }\n  return config\n}\n\nexport const applyParentHook = (\n  source: any,\n  target: any,\n  hookType: 'event' | 'effect' = EVENT,\n) => {\n  if (getParent(source)) getParent(source).hooks[hookType](target)\n}\n\nlet isStrict: boolean\nexport const initUnit = (\n  kind: any,\n  unit: any,\n  rawConfigA: any,\n  rawConfigB?: any,\n) => {\n  const config = normalizeConfig(\n    {\n      name: rawConfigB,\n      config: rawConfigA,\n    },\n    {},\n  )\n  const isDomain = kind === DOMAIN\n  const id = nextUnitID()\n  let {parent = null, sid = null, strict = true, named = null} = config\n  const name = named ? named : config.name || (isDomain ? '' : id)\n  const compositeName = createName(name, parent)\n\n  const meta: Record<string, any> = {\n    unit: (unit.kind = kind),\n    name: (unit.shortName = name),\n    sid: (unit.sid = readSidRoot(sid)),\n    named,\n    unitId: (unit.id = id),\n  }\n  unit.parent = parent\n  unit.compositeName = compositeName\n  unit.defaultConfig = config\n  unit.thru = (fn: Function) => fn(unit)\n  unit.getType = () => compositeName.fullName\n  if (!isDomain) {\n    unit.subscribe = (observer: Subscriber<any>) => {\n      assertObject(observer)\n      return unit.watch(\n        isFunction(observer)\n          ? observer\n          : (upd: any) => {\n              if (observer.next) {\n                observer.next(upd)\n              }\n            },\n      )\n    }\n    unit[observableSymbol] = () => unit\n    const template = readTemplate()\n    if (template) meta.nativeTemplate = template\n  }\n  isStrict = strict\n  return meta\n}\nexport const createNamedEvent = (named: string) => createEvent({named})\n\nconst deriveEvent = (event: any, op: string, fn: any, node: any) => {\n  let config\n  if (isObject(fn)) {\n    config = fn\n    fn = fn.fn\n  }\n  const mapped = createEvent({name: `${event.shortName} → *`, [OPEN_O]: config})\n  createLinkNode(event, mapped, {\n    scope: {fn},\n    node,\n    meta: {op},\n  })\n  return mapped\n}\n\nfunction callCreate(unit: any, template: any, payload: any, args: any[]): any {\n  const oldPage = currentPage\n  let page = null\n  if (template) {\n    page = currentPage\n    while (page && page.template !== template) {\n      page = getParent(page)\n    }\n  }\n  setCurrentPage(page)\n  const result = unit.create(payload, args)\n  setCurrentPage(oldPage)\n  return result\n}\n\nexport function createEvent<Payload = any>(\n  nameOrConfig?: any,\n  maybeConfig?: any,\n): Event<Payload> {\n  const event: any = (payload: Payload, ...args: any[]) => {\n    if (currentPage) {\n      return callCreate(event, template, payload, args)\n    }\n    return event.create(payload, args)\n  }\n  event.graphite = createNode({\n    meta: initUnit(EVENT, event, maybeConfig, nameOrConfig),\n    regional: true,\n  })\n  //eslint-disable-next-line no-unused-vars\n  event.create = (params: any, _: any) => {\n    launch({target: event, params, forkPage: forkPage!})\n    return params\n  }\n  event.watch = bind(watchUnit, event)\n  event.map = (fn: any) =>\n    deriveEvent(event, MAP, fn, [step.compute({fn: callStack})])\n  event.filter = (fn: any) =>\n    deriveEvent(event, FILTER, fn.fn ? fn : fn.fn, [\n      step.filter({fn: callStack}),\n    ])\n  event.filterMap = (fn: any) =>\n    deriveEvent(event, 'filterMap', fn, [\n      step.compute({fn: callStack}),\n      step.check.defined(),\n    ])\n  event.prepend = (fn: any) => {\n    const contramapped: Event<any> = createEvent('* → ' + event.shortName, {\n      parent: getParent(event),\n    })\n    applyTemplate('eventPrepend', getGraph(contramapped))\n    createLinkNode(contramapped, event, {\n      scope: {fn},\n      node: [step.compute({fn: callStack})],\n      meta: {op: 'prepend'},\n    })\n    applyParentHook(event, contramapped)\n    return contramapped\n  }\n  const template = readTemplate()\n  return event\n}\n\nexport function createStore<State>(\n  defaultState: State,\n  props?: Config,\n): Store<State> {\n  const plainState = createStateRef(defaultState)\n  const oldState = createStateRef(defaultState)\n  const updates = createNamedEvent('updates')\n  applyTemplate('storeBase', plainState, oldState)\n  const plainStateId = plainState.id\n  const store: any = {\n    subscribers: new Map(),\n    updates,\n    defaultState,\n    stateRef: plainState,\n    getState() {\n      let targetRef = plainState\n      let reachedPage\n      if (currentPage) {\n        let page = currentPage\n        while (page && !page.reg[plainStateId]) {\n          page = getParent(page)\n        }\n        if (page) reachedPage = page\n      }\n      if (!reachedPage && forkPage) {\n        initRefInScope(forkPage, plainState, true)\n        reachedPage = forkPage\n      }\n      if (reachedPage) targetRef = reachedPage.reg[plainStateId]\n      return readRef(targetRef)\n    },\n    setState(state: any) {\n      launch({\n        target: store,\n        params: state,\n        defer: true,\n        forkPage: forkPage!,\n      })\n    },\n    reset(...units: any[]) {\n      for (const unit of units) store.on(unit, () => store.defaultState)\n      return store\n    },\n    on(nodeSet: any, fn: Function) {\n      assertNodeSet(nodeSet, '.on', 'first argument')\n      if (Array.isArray(nodeSet)) {\n        for (const event of nodeSet) {\n          onEvent(event, fn)\n        }\n      } else {\n        onEvent(nodeSet, fn)\n      }\n      return store\n    },\n    off(unit: any) {\n      const currentSubscription = getSubscribers(store).get(unit)\n      if (currentSubscription) {\n        currentSubscription()\n        getSubscribers(store).delete(unit)\n      }\n      return store\n    },\n    map(fn: any, firstState?: any) {\n      let config\n      if (isObject(fn)) {\n        config = fn\n        fn = fn.fn\n      }\n      if (firstState !== undefined) {\n        console.error(\n          'second argument of store.map is deprecated, use updateFilter instead',\n        )\n      }\n      let lastResult\n      const storeState = store.getState()\n      const template = readTemplate()\n      if (template) {\n        lastResult = null\n      } else if (storeState !== undefined) {\n        lastResult = fn(storeState, firstState)\n      }\n\n      const innerStore: Store<any> = createStore(lastResult, {\n        name: `${store.shortName} → *`,\n        [OPEN_O]: config,\n        strict: false,\n      })\n      const linkNode = updateStore(store, innerStore, MAP, false, fn)\n      addRefOp(getStoreState(innerStore), {\n        type: MAP,\n        fn,\n        from: plainState,\n      })\n      getStoreState(innerStore).noInit = true\n      applyTemplate('storeMap', plainState, linkNode)\n      return innerStore\n    },\n    watch(eventOrFn: any, fn?: Function) {\n      if (!fn || !is.unit(eventOrFn)) {\n        const subscription = watchUnit(store, eventOrFn)\n        if (!applyTemplate('storeWatch', plainState, eventOrFn)) {\n          eventOrFn(store.getState())\n        }\n        return subscription\n      }\n      if (!isFunction(fn)) throwError('second argument should be a function')\n      return eventOrFn.watch((payload: any) => fn(store.getState(), payload))\n    },\n  }\n  function onEvent(event: any, fn: Function) {\n    store.off(event)\n    getSubscribers(store).set(\n      event,\n      createSubscription(\n        updateStore(event, store, 'on', true, fn, updateFilter),\n      ),\n    )\n  }\n  const meta = initUnit(STORE, store, props)\n  const updateFilter = store.defaultConfig.updateFilter\n  store.graphite = createNode({\n    scope: {state: plainState},\n    node: [\n      step.check.defined(),\n      step.check.changed({\n        store: oldState,\n      }),\n      updateFilter && step.mov({store: oldState, to: REG_A}),\n      updateFilter &&\n        step.filter({\n          fn: (update, _, {a}) => updateFilter(update, a),\n        }),\n      step.update({\n        store: plainState,\n      }),\n      step.update({\n        store: oldState,\n      }),\n    ],\n    child: updates,\n    meta,\n    regional: true,\n  })\n  if (meta.sid) {\n    meta.storeChange = true\n    plainState.sid = meta.sid\n  }\n  if (isStrict && defaultState === undefined)\n    throwError(\"current state can't be undefined, use null instead\")\n  own(store, [updates])\n  return store\n}\n\nconst updateStore = (\n  from: any,\n  store: Store<any>,\n  op: string,\n  stateFirst: boolean,\n  fn: Function,\n  updateFilter?: Function,\n) => {\n  const storeRef = getStoreState(store)\n  const node = [\n    step.mov({store: storeRef, to: REG_A}),\n    step.compute({\n      fn: stateFirst ? callARegStack : callStackAReg,\n    }),\n    step.check.defined(),\n    step.check.changed({store: storeRef}),\n    updateFilter &&\n      step.filter({\n        fn: (update, _, {a}) => updateFilter(update, a),\n      }),\n    step.update({store: storeRef}),\n  ]\n  applyTemplate(\n    'storeOnMap',\n    storeRef,\n    node,\n    is.store(from) && getStoreState(from),\n  )\n  return createLinkNode(from, store, {\n    scope: {fn},\n    node,\n    meta: {op},\n  })\n}\n","import type {Store} from './unit.h'\nimport {createStore} from './createUnit'\nimport {createStateRef, addRefOp} from './stateRef'\nimport {step} from './typedef'\nimport {onConfigNesting} from './config'\nimport {getGraph, getStoreState, setMeta} from './getter'\nimport {is, isFunction, isObject} from './is'\nimport {unitObjectName} from './naming'\nimport {createLinkNode} from './forward'\nimport {throwError} from './throw'\nimport {readTemplate} from './region'\nimport {forIn} from './collection'\nimport {BARRIER, MAP, REG_A, VALUE} from './tag'\nimport {applyTemplate} from './template'\nimport {callStack} from './caller'\n\nexport function combine(...args: any[]): Store<any> {\n  let handler\n  let stores\n  let config\n  onConfigNesting(args[0], (injectedData, userConfig) => {\n    config = injectedData\n    args = userConfig\n  })\n  const rawHandler = args[args.length - 1]\n  if (isFunction(rawHandler)) {\n    stores = args.slice(0, -1)\n    handler = rawHandler\n  } else {\n    stores = args\n  }\n\n  let structStoreShape\n  let shapeReady\n  if (stores.length === 1) {\n    const obj = stores[0]\n    /*\n      without edge case combine(Color, (Color) => '~')\n      */\n    if (!is.store(obj)) {\n      /*\n      case combine([R,G,B], ([R,G,B]) => '~')\n      case combine({R,G,B}, ({R,G,B}) => '~')\n\n      edge case combine([Color], ([Color]) => '~')\n      edge case combine({Color}, ({Color}) => '~')\n\n      edge case combine([R,G,B])\n      edge case combine({R,G,B})\n\n      edge case combine([Color])\n      edge case combine({Color})\n      */\n      structStoreShape = obj\n      shapeReady = true\n    }\n  }\n  let noArraySpread: boolean | void\n  if (!shapeReady) {\n    /*\n    case combine(R,G,B, (R,G,B) => '~')\n    */\n    structStoreShape = stores\n    /*\n    without edge case combine(R,G,B)\n    without edge case combine(Color)\n    */\n    if (handler) {\n      noArraySpread = true\n      const fn = handler\n      handler = (list: any[]) => fn(...list)\n    }\n  }\n  if (!isObject(structStoreShape)) throwError('shape should be an object')\n  return storeCombination(\n    Array.isArray(structStoreShape),\n    !noArraySpread,\n    structStoreShape,\n    config,\n    handler,\n  )\n}\n\nconst storeCombination = (\n  isArray: boolean,\n  needSpread: boolean,\n  obj: any,\n  config?: string,\n  fn?: (upd: any) => any,\n) => {\n  const clone = isArray ? (list: any) => list.slice() : (obj: any) => ({...obj})\n  const defaultState: any = isArray ? [] : {}\n\n  const stateNew = clone(defaultState)\n  const rawShape = createStateRef(stateNew)\n  const isFresh = createStateRef(true)\n  rawShape.type = isArray ? 'list' : 'shape'\n  rawShape.noInit = true\n  applyTemplate('combineBase', rawShape, isFresh)\n  const store = createStore(stateNew, {\n    name: config ? config : unitObjectName(obj),\n  })\n  const storeStateRef = getStoreState(store)\n  storeStateRef.noInit = true\n  setMeta(store, 'isCombine', true)\n  const node = [\n    step.check.defined(),\n    step.mov({\n      store: rawShape,\n      to: REG_A,\n    }),\n    //prettier-ignore\n    step.filter({\n      fn: (upd, {key}, {a}) => upd !== a[key],\n    }),\n    step.mov({\n      store: isFresh,\n      to: 'b',\n    }),\n    step.compute({\n      fn(upd, {clone, key, spread}, reg) {\n        if (spread && reg.b) {\n          reg.a = clone(reg.a)\n        }\n        reg.a[key] = upd\n      },\n    }),\n    step.mov({\n      from: REG_A,\n      target: rawShape,\n    }),\n    step.mov({\n      from: VALUE,\n      store: false,\n      target: isFresh,\n    }),\n    step.barrier({priority: BARRIER}),\n    step.mov({\n      from: VALUE,\n      store: true,\n      target: isFresh,\n    }),\n    step.mov({store: rawShape}),\n    fn && step.compute({fn: callStack}),\n    step.check.changed({\n      store: storeStateRef,\n    }),\n  ]\n  forIn(obj, (child: Store<any> | any, key) => {\n    if (!is.store(child)) {\n      stateNew[key] = defaultState[key] = child\n      return\n    }\n    defaultState[key] = child.defaultState\n    stateNew[key] = child.getState()\n    const linkNode = createLinkNode(child, store, {\n      scope: {key, clone, fn, spread: needSpread},\n      node,\n      meta: {op: 'combine'},\n    })\n    const childRef = getStoreState(child)\n    addRefOp(rawShape, {\n      type: 'field',\n      field: key,\n      from: childRef,\n    })\n    applyTemplate('combineField', childRef, linkNode)\n  })\n\n  store.defaultShape = obj\n  addRefOp(storeStateRef, {\n    type: MAP,\n    from: rawShape,\n    fn,\n  })\n  if (!readTemplate()) {\n    store.defaultState = fn\n      ? (storeStateRef.current = fn(stateNew))\n      : defaultState\n  }\n  return store\n}\n\nexport function createStoreObject(...args: any[]) {\n  console.error('createStoreObject is deprecated, use combine instead')\n  return combine(...args)\n}\n","export function createDefer(): {\n  rs: (value: any) => any\n  rj: (value: any) => any\n  req: Promise<any>\n} {\n  const result = {} as {\n    rs: (value: any) => any\n    rj: (value: any) => any\n    req: Promise<any>\n  }\n  result.req = new Promise((rs, rj) => {\n    result.rs = rs\n    result.rj = rj\n  })\n  result.req.catch(err => {})\n  return result\n}\n","import {step} from './typedef'\nimport {getForkPage, getGraph, getMeta, getParent, setMeta} from './getter'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {launch, setForkPage, forkPage, isWatch, Stack} from './kernel'\nimport {createNamedEvent, createStore, createEvent} from './createUnit'\nimport {createDefer} from './defer'\nimport {isObject, isFunction} from './is'\nimport {throwError} from './throw'\nimport {EFFECT} from './tag'\nimport type {Unit} from './index.h'\n\nexport function createEffect<Payload, Done>(\n  nameOrConfig: any,\n  maybeConfig?: any,\n) {\n  const instance: any = createEvent(nameOrConfig, maybeConfig)\n  let handler =\n    instance.defaultConfig.handler ||\n    (() => throwError(`no handler used in ${instance.getType()}`))\n  const node = getGraph(instance)\n  setMeta(node, 'unit', (instance.kind = EFFECT))\n  instance.use = (fn: Function) => {\n    if (!isFunction(fn)) throwError('.use argument should be a function')\n    handler = fn\n    return instance\n  }\n  const anyway = (instance.finally = createNamedEvent('finally'))\n  const done = (instance.done = (anyway as any).filterMap({\n    named: 'done',\n    fn({status, params, result}: any) {\n      if (status === 'done') return {params, result}\n    },\n  }))\n  const fail = (instance.fail = (anyway as any).filterMap({\n    named: 'fail',\n    fn({status, params, error}: any) {\n      if (status === 'fail') return {params, error}\n    },\n  }))\n  const doneData = (instance.doneData = done.map({\n    named: 'doneData',\n    fn: ({result}: any) => result,\n  }))\n  const failData = (instance.failData = fail.map({\n    named: 'failData',\n    fn: ({error}: any) => error,\n  }))\n\n  const effectRunner = createNode({\n    scope: {\n      getHandler: (instance.use.getCurrent = () => handler),\n      finally: anyway,\n      handlerId: getMeta(node, 'sid'),\n    },\n    node: [\n      step.run({\n        fn({params, req}, {finally: anyway, getHandler, handlerId}, stack) {\n          const onResolve = onSettled(params, req, true, anyway, stack)\n          const onReject = onSettled(params, req, false, anyway, stack)\n          let result\n          try {\n            let handler: (data: any) => any\n            if (getForkPage(stack)) {\n              const handler_ = getForkPage(stack).handlers[handlerId]\n              handler = handler_ ? handler_ : getHandler()\n            } else {\n              handler = getHandler()\n            }\n            result = handler(params)\n          } catch (err) {\n            return void onReject(err)\n          }\n          if (isObject(result) && isFunction(result.then)) {\n            result.then(onResolve, onReject)\n          } else {\n            onResolve(result)\n          }\n        },\n      }),\n    ],\n    meta: {\n      op: 'fx',\n      fx: 'runner',\n    },\n  })\n  node.scope.runner = effectRunner\n  node.seq.push(\n    step.compute({\n      fn(params, scope, stack) {\n        // empty stack means that this node was launched directly\n        if (!getParent(stack)) return params\n        return {\n          params,\n          req: {\n            rs(data: any) {},\n            rj(data: any) {},\n          },\n        }\n      },\n    }),\n    step.run({\n      fn(upd, {runner}, stack) {\n        launch({\n          target: runner,\n          params: upd,\n          defer: true,\n          forkPage: getForkPage(stack),\n        })\n        return upd.params\n      },\n    }),\n  )\n  instance.create = (params: Payload) => {\n    const req = createDefer()\n    const payload = {params, req}\n    if (forkPage) {\n      if (!isWatch) {\n        const savedFork = forkPage\n        req.req\n          .finally(() => {\n            setForkPage(savedFork)\n          })\n          .catch(() => {})\n      }\n      launch({\n        target: instance,\n        params: payload,\n        forkPage,\n      })\n    } else {\n      launch(instance, payload)\n    }\n    return req.req\n  }\n\n  const inFlight = (instance.inFlight = createStore(0, {named: 'inFlight'})\n    .on(instance, x => x + 1)\n    .on(anyway, x => x - 1))\n  setMeta(anyway, 'needFxCounter', true)\n  setMeta(instance, 'needFxCounter', true)\n  const pending = (instance.pending = inFlight.map({\n    //@ts-ignore\n    fn: amount => amount > 0,\n    named: 'pending',\n  }))\n\n  own(instance, [\n    anyway,\n    done,\n    fail,\n    doneData,\n    failData,\n    pending,\n    inFlight,\n    effectRunner,\n  ])\n  return instance\n}\n\nexport const onSettled =\n  (\n    params: any,\n    req: {\n      rs(_: any): any\n      rj(_: any): any\n    },\n    ok: boolean,\n    anyway: Unit,\n    stack: Stack,\n  ) =>\n  (data: any) =>\n    launch({\n      target: [anyway, sidechain],\n      params: [\n        ok\n          ? {\n              status: 'done',\n              params,\n              result: data,\n            }\n          : {\n              status: 'fail',\n              params,\n              error: data,\n            },\n        {\n          fn: ok ? req.rs : req.rj,\n          value: data,\n        },\n      ],\n      defer: true,\n      page: stack.page,\n      forkPage: getForkPage(stack),\n    })\n\nexport const sidechain = createNode({\n  node: [\n    step.run({\n      fn({fn, value}) {\n        fn(value)\n      },\n    }),\n  ],\n  meta: {op: 'fx', fx: 'sidechain'},\n})\n","import {combine} from './combine'\nimport {createEffect, onSettled} from './createEffect'\nimport {applyParentHook} from './createUnit'\nimport {onConfigNesting} from './config'\nimport {getGraph, getStoreState, setMeta} from './getter'\nimport {own} from './own'\nimport {is, isFunction} from './is'\nimport {step} from './typedef'\nimport {launch, Stack} from './kernel'\nimport {EFFECT, REG_A} from './tag'\n\nexport function attach(config: any) {\n  let injected\n  onConfigNesting(config, (injectedData, userConfig) => {\n    injected = injectedData\n    config = userConfig\n  })\n  let {source, effect, mapParams} = config\n  const isPlainFunction = !is.effect(effect) && isFunction(effect)\n  if (!mapParams)\n    mapParams =\n      source && !isPlainFunction\n        ? (_: any, source: any) => source\n        : (params: any) => params\n  if (isPlainFunction) {\n    const fn = effect\n    effect = createEffect(([params, state]: [any, any]) => fn(params, state))\n  }\n  const attached = createEffect(config, injected)\n  setMeta(attached, 'attached', true)\n  const {runner} = getGraph(attached).scope\n  let runnerSteps\n  const runnerFn = (\n    {params, req}: any,\n    {finally: anyway, effect, isPlain}: any,\n    stack: Stack,\n  ) => {\n    const rj = onSettled(params, req, false, anyway, stack)\n    let computedParams\n    try {\n      computedParams = mapParams(params, stack.a)\n    } catch (err) {\n      return rj(err)\n    }\n    launch({\n      target: effect,\n      params: {\n        params: isPlain ? [computedParams, stack.a] : computedParams,\n        req: {\n          rs: onSettled(params, req, true, anyway, stack),\n          rj,\n        },\n      },\n      page: stack.page,\n      defer: true,\n    })\n  }\n  if (source) {\n    let state\n    if (is.store(source)) {\n      state = source\n      own(source, [attached])\n    } else {\n      state = combine(source)\n      own(attached, [state])\n    }\n    runnerSteps = [\n      /* let another side-effects run first */\n      step.run({fn: _ => _}),\n      /* read state. assumed it already stable here because of previous step */\n      step.mov({\n        store: getStoreState(state),\n        to: REG_A,\n      }),\n      /* no need for step.run because of first step */\n      step.compute({fn: runnerFn}),\n    ]\n  } else {\n    runnerSteps = [step.run({fn: runnerFn})]\n  }\n  own(effect, [attached])\n  runner.scope.effect = effect\n  runner.scope.isPlain = isPlainFunction\n  runner.seq.splice(0, 1, ...runnerSteps)\n  applyParentHook(effect, attached, EFFECT)\n  return attached\n}\n","import {Store, Event} from './unit.h'\nimport {createEvent, applyParentHook} from './createUnit'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {processArgsToConfig} from './config'\n\nexport function createApi(...args: [Store<any>, {[key: string]: Function}]) {\n  let [[store, setters], metadata] = processArgsToConfig(args)\n  const result: Record<string, Event<any>> = {}\n  forIn(setters, (fn, key) => {\n    const event = (result[key] = createEvent(key, {\n      parent: getParent(store),\n      config: metadata,\n    }))\n    store.on(event, fn)\n    applyParentHook(store, event)\n  })\n  return result\n}\n","import {Store, Event, Effect, Domain} from './unit.h'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {Config, NodeUnit} from './index.h'\nimport {\n  createEvent,\n  createStore,\n  createNamedEvent,\n  initUnit,\n} from './createUnit'\nimport {createEffect} from './createEffect'\nimport {forward} from './forward'\nimport {forIn} from './collection'\nimport {getGraph, getParent} from './getter'\nimport {DOMAIN} from './tag'\nimport {launch} from './kernel'\nimport {step} from './typedef'\n\nconst createHook = (trigger: Event<any>, acc: Set<any>, node: any) => {\n  trigger.create = res => {\n    launch(trigger, res)\n    return res\n  }\n  getGraph(trigger).seq.push(\n    step.compute({\n      fn(upd, _, stack) {\n        stack.forkPage = null\n        return upd\n      },\n    }),\n  )\n  trigger.watch(data => {\n    own(node, [data])\n    acc.add(data)\n    if (!data.ownerSet) data.ownerSet = acc\n    if (!getParent(data)) data.parent = node\n  })\n  own(node, [trigger])\n  return (hook: (data: any) => any) => {\n    acc.forEach(hook)\n    return trigger.watch(hook)\n  }\n}\n\nexport function createDomain(nameOrConfig: any, maybeConfig?: any): Domain {\n  const domains: Set<Domain> = new Set()\n  const stores: Set<Store<any>> = new Set()\n  const effects: Set<Effect<any, any, any>> = new Set()\n  const events: Set<Event<any>> = new Set()\n\n  const node = createNode({\n    family: {type: DOMAIN},\n    regional: true,\n  })\n\n  const result: any = {\n    history: {\n      domains,\n      stores,\n      effects,\n      events,\n    },\n    graphite: node,\n  }\n\n  node.meta = initUnit(DOMAIN, result, maybeConfig, nameOrConfig)\n  const [event, effect, store, domain] = [\n    'onEvent',\n    'onEffect',\n    'onStore',\n    'onDomain',\n  ].map(createNamedEvent)\n\n  result.hooks = {\n    event,\n    effect,\n    store,\n    domain,\n  }\n  result.onCreateEvent = createHook(event, events, result)\n  result.onCreateEffect = createHook(effect, effects, result)\n  result.onCreateStore = createHook(store, stores, result)\n  result.onCreateDomain = createHook(domain, domains, result)\n\n  result.createEvent = result.event = (nameOrConfig: any, config?: Config) =>\n    event(\n      createEvent(nameOrConfig, {\n        parent: result,\n        config,\n      }),\n    )\n  result.createEffect = result.effect = (nameOrConfig: any, config?: Config) =>\n    effect(\n      createEffect(nameOrConfig, {\n        parent: result,\n        config,\n      }),\n    )\n  result.createDomain = result.domain = (nameOrConfig: any, config?: Config) =>\n    createDomain({\n      name: nameOrConfig,\n      parent: result,\n      config,\n    })\n  result.createStore = result.store = (state: any, config?: Config) =>\n    store(\n      createStore(state, {\n        parent: result,\n        config,\n      }),\n    )\n  const parent = getParent(result)\n  if (parent) {\n    forIn(result.hooks, (from: NodeUnit, key) => {\n      forward({from, to: parent.hooks[key]})\n    })\n    parent.hooks.domain(result)\n  }\n  return result\n}\n","import {observableSymbol} from './observable'\nimport {Event} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {assertObject} from './is'\nimport {throwError} from './throw'\nimport {createSubscription} from './subscription'\n\nexport function fromObservable<T>(observable: any): Event<T> {\n  assertObject(observable)\n  const observableItem =\n    observableSymbol in observable ? observable[observableSymbol]() : observable\n  if (!observableItem.subscribe)\n    throwError('expect observable to have .subscribe')\n  const event = createEvent<T>()\n  const disposer = createSubscription(event)\n  observableItem.subscribe({\n    next: event,\n    error: disposer,\n    complete: disposer,\n  })\n  return event\n}\n","import {Store, Event, Effect} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {forward} from './forward'\nimport {unitObjectName} from './naming'\nimport {assertNodeSet} from './is'\n\nexport function merge<T>(\n  events: Array<Event<T> | Store<T> | Effect<T, any, any>>,\n  config?: object,\n): Event<T> {\n  const result = createEvent(config || unitObjectName(events, 'merge'))\n  assertNodeSet(events, 'merge', 'first argument')\n  forward({\n    from: events,\n    to: result,\n    meta: {op: 'merge'},\n  })\n  return result\n}\n","import {combine} from './combine'\nimport {step} from './typedef'\nimport {createStateRef, readRef} from './stateRef'\nimport {callStackAReg, callARegStack} from './caller'\nimport {processArgsToConfig} from './config'\nimport {getStoreState, getGraph} from './getter'\nimport {own} from './own'\nimport {assertNodeSet, is, isObject} from './is'\nimport {createStore} from './createUnit'\nimport {createEvent} from './createUnit'\nimport {createLinkNode} from './forward'\nimport {createNode} from './createNode'\nimport {throwError} from './throw'\nimport {forEach} from './collection'\nimport {REG_A, SAMPLE, SAMPLER, STACK, STORE, VALUE} from './tag'\nimport {merge} from './merge'\nimport {applyTemplate} from './template'\n\nconst sampleConfigFields = ['source', 'clock', 'target']\n\nfunction validateSampleConfig(config: any) {\n  let atLeastOneFieldExists = false\n  forEach(sampleConfigFields, field => {\n    if (field in config) {\n      if (config[field] == null) {\n        throwError(`sample: ${field} should be defined`)\n      }\n      atLeastOneFieldExists = true\n    }\n  })\n  return atLeastOneFieldExists\n}\n\nexport function sample(...args: any): any {\n  let target\n  let name\n  let [[source, clock, fn], metadata] = processArgsToConfig(args)\n  let sid\n  let greedy\n  //config case\n  if (clock === undefined && isObject(source) && validateSampleConfig(source)) {\n    clock = source.clock\n    fn = source.fn\n    greedy = source.greedy\n    //optional target & name accepted only from config\n    target = source.target\n    name = source.name\n    sid = source.sid\n    source = source.source\n  }\n  let needToCombine = true\n  if (source === undefined) {\n    assertNodeSet(clock, 'sample', 'clock')\n    if (Array.isArray(clock)) {\n      clock = merge(clock)\n    }\n    source = clock\n    needToCombine = false\n  }\n  if (needToCombine && !is.unit(source)) {\n    source = combine(source)\n  }\n  if (clock === undefined) {\n    //still undefined!\n    clock = source\n  }\n  assertNodeSet(clock, 'sample', 'clock')\n  name = metadata || name || source.shortName\n  const isUpward = !!target\n  if (!target) {\n    if (is.store(source) && is.store(clock)) {\n      const initialState = fn\n        ? fn(readRef(getStoreState(source)), readRef(getStoreState(clock)))\n        : readRef(getStoreState(source))\n      target = createStore(initialState, {name, sid})\n    } else {\n      target = createEvent(name)\n      applyTemplate('sampleTarget', getGraph(target))\n    }\n  }\n  // const targetTemplate =\n  //   isUpward && is.unit(target) && getGraph(target).meta.nativeTemplate\n  if (is.store(source)) {\n    const sourceRef = getStoreState(source)\n    own(source, [\n      createLinkNode(clock, target, {\n        scope: {fn},\n        // scope: {fn, targetTemplate},\n        node: [\n          applyTemplate('sampleSourceLoader'),\n          //@ts-ignore\n          !greedy && step.barrier({priority: SAMPLER}),\n          step.mov({\n            store: sourceRef,\n            to: fn ? REG_A : STACK,\n          }),\n          fn && step.compute({fn: callARegStack}),\n          applyTemplate('sampleSourceUpward', isUpward),\n        ],\n        meta: {op: SAMPLE, sample: STORE},\n      }),\n    ])\n    applyTemplate('sampleStoreSource', sourceRef)\n  } else {\n    const hasSource = createStateRef(false)\n    const sourceState = createStateRef()\n    const clockState = createStateRef()\n    applyTemplate('sampleNonStoreSource', hasSource, sourceState, clockState)\n    createNode({\n      parent: source,\n      node: [\n        step.update({store: sourceState}),\n        step.mov({\n          from: VALUE,\n          store: true,\n          target: hasSource,\n        }),\n      ],\n      family: {\n        owners: [source, target, clock],\n        links: target,\n      },\n      meta: {op: SAMPLE, sample: 'source'},\n      regional: true,\n    })\n    own(source, [\n      createLinkNode(clock, target, {\n        scope: {\n          fn,\n          // targetTemplate,\n        },\n        node: [\n          applyTemplate('sampleSourceLoader'),\n          step.update({store: clockState}),\n          step.mov({store: hasSource}),\n          step.filter({fn: hasSource => hasSource}),\n          //@ts-ignore\n          !greedy && step.barrier({priority: SAMPLER}),\n          step.mov({store: sourceState}),\n          step.mov({\n            store: clockState,\n            to: REG_A,\n          }),\n          fn && step.compute({fn: callStackAReg}),\n          applyTemplate('sampleSourceUpward', isUpward),\n        ],\n        meta: {op: SAMPLE, sample: 'clock'},\n      }),\n    ])\n  }\n  return target\n}\n","import {processArgsToConfig} from './config'\nimport {createLinkNode} from './forward'\nimport {sample} from './sample'\nimport {createEvent} from './createUnit'\nimport {combine} from './combine'\nimport {step} from './typedef'\nimport {callStack} from './caller'\nimport {assertNodeSet, is, isFunction} from './is'\nimport {createNode} from './createNode'\nimport {throwError} from './throw'\nimport {merge} from './merge'\n\nexport function guard(...args: any[]) {\n  const meta: Record<string, any> = {op: 'guard'}\n  let rawName = 'guard'\n  let [[source, config], metadata] = processArgsToConfig(args)\n  if (metadata) {\n    meta.config = metadata\n    if (metadata.name) rawName = metadata.name\n  }\n  if (!config) {\n    config = source\n    source = config.source\n  }\n  let {filter, greedy, clock, name = rawName} = config\n  const target = config.target || createEvent(name, meta.config)\n  const filterIsUnit = is.unit(filter)\n  let needToCombine = true\n  if (source === undefined) {\n    assertNodeSet(clock, 'guard', 'clock')\n    if (Array.isArray(clock)) {\n      clock = merge(clock)\n    }\n    source = clock\n    needToCombine = false\n  }\n  if (needToCombine && !is.unit(source)) source = combine(source)\n  if (clock) {\n    assertNodeSet(clock, 'guard', 'clock')\n    source = sample({\n      source,\n      clock,\n      greedy,\n      fn: filterIsUnit ? null : (source: any, clock: any) => ({source, clock}),\n    })\n  }\n  assertNodeSet(target, 'guard', 'target')\n  if (filterIsUnit) {\n    sample({\n      source: filter,\n      clock: source,\n      target: createNode({\n        node: [\n          step.filter({\n            fn: ({guard}) => guard,\n          }),\n          step.compute({\n            fn: ({data}) => data,\n          }),\n        ],\n        child: target,\n        meta,\n        family: {\n          owners: [source, filter, target, ...[].concat(clock ? clock : [])],\n          links: target,\n        },\n        regional: true,\n      }),\n      fn: (guard: any, data: any) => ({guard, data}),\n      greedy,\n      name,\n    })\n  } else {\n    if (!isFunction(filter)) throwError('`filter` should be function or unit')\n    createLinkNode(source, target, {\n      scope: {fn: filter},\n      node: clock\n        ? [\n            step.filter({\n              fn: ({source, clock}, {fn}) => fn(source, clock),\n            }),\n            step.compute({\n              fn: ({source}) => source,\n            }),\n          ]\n        : [step.filter({fn: callStack})],\n      meta,\n    })\n  }\n  return target\n}\n","import {createStore} from './createUnit'\nimport {is} from './is'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {OPEN_O} from './tag'\nimport {forward} from './forward'\n\nexport function restore(obj: any, defaultState: any, config?: any): any {\n  if (is.store(obj)) {\n    return obj\n  }\n  if (is.unit(obj)) {\n    const domain = getParent(obj)\n    let result\n    if (is.event(obj)) {\n      result = createStore(defaultState, {\n        parent: domain,\n        name: obj.shortName,\n        [OPEN_O]: config,\n      }).on(obj, (_, v) => v)\n    }\n    if (is.effect(obj)) {\n      result = createStore(defaultState, {\n        parent: domain,\n        name: obj.shortName,\n        [OPEN_O]: config,\n      })\n      forward({from: obj.doneData, to: result})\n    }\n    if (domain) domain.hooks.store(result)\n    return result\n  }\n  const result: Record<string, any> = Array.isArray(obj) ? [] : {}\n  forIn(obj, (value, key) => {\n    result[key] = is.store(value) ? value : createStore(value, {name: key})\n  })\n  return result\n}\n","import {Event} from './unit.h'\nimport {NodeUnit, Cmd} from './index.h'\nimport {is, isFunction, isObject} from './is'\nimport {forIn, includes} from './collection'\nimport {addRefOp, createStateRef} from './stateRef'\nimport {createLinkNode} from './forward'\nimport {processArgsToConfig} from './config'\nimport {step} from './typedef'\nimport {createNode} from './createNode'\nimport {launch} from './kernel'\nimport {getStoreState} from './getter'\nimport {REG_A} from './tag'\nimport {throwError} from './throw'\nimport {createEvent} from './createUnit'\nimport {applyTemplate} from './template'\n\nconst launchCase = (\n  scopeTargets: Record<string, NodeUnit>,\n  field: string,\n  data: any,\n  stack: any,\n) => {\n  const target = scopeTargets[field]\n  if (target) {\n    launch({\n      target,\n      params: Array.isArray(target) ? target.map(() => data) : data,\n      defer: true,\n      stack,\n    })\n  }\n}\n\nexport function split(...args: any[]): any {\n  let targets: Record<string, Event<any> | NodeUnit>\n  let [[source, match], metadata] = processArgsToConfig(args)\n  const knownCases = !match\n  if (knownCases) {\n    targets = source.cases\n    match = source.match\n    source = source.source\n  }\n  const matchIsUnit = is.store(match)\n  const matchIsFunction = !is.unit(match) && isFunction(match)\n  const matchIsShape = !matchIsUnit && !matchIsFunction && isObject(match)\n  if (!targets!) targets = {}\n  if (!knownCases) {\n    if (!matchIsShape) throwError('match should be an object')\n    forIn(match, (_, key) => {\n      //@ts-ignore\n      targets[key] = createEvent(metadata)\n    })\n    targets.__ = createEvent(metadata)\n  }\n  const owners = new Set(\n    ([] as NodeUnit[]).concat(source, Object.values(targets)),\n  )\n  const caseNames = Object.keys(\n    matchIsUnit || matchIsFunction ? targets : match,\n  )\n  let splitterSeq: Array<Cmd | false>\n  if (matchIsUnit || matchIsFunction) {\n    if (matchIsUnit) owners.add(match)\n    splitterSeq = [\n      matchIsUnit && step.barrier({priority: 'sampler'}),\n      matchIsUnit &&\n        step.mov({\n          store: getStoreState(match),\n          to: 'a',\n        }),\n      step.filter({\n        fn(data, scopeTargets, stack) {\n          const value = String(matchIsUnit ? stack.a : match(data))\n          launchCase(\n            scopeTargets,\n            includes(caseNames, value) ? value : '__',\n            data,\n            stack,\n          )\n        },\n      }),\n    ]\n  } else if (matchIsShape) {\n    const lastValues = createStateRef({})\n    lastValues.type = 'shape'\n    const updaterSteps = [\n      step.mov({\n        store: lastValues,\n        to: REG_A,\n      }),\n      step.compute({\n        fn(upd, {key}, {a}) {\n          a[key] = upd\n        },\n      }),\n    ]\n    const units = [] as string[]\n    let needBarrier: boolean\n    forIn(match, (storeOrFn: any, key) => {\n      if (is.unit(storeOrFn)) {\n        needBarrier = true\n        units.push(key)\n        owners.add(storeOrFn)\n        const updater = createLinkNode(storeOrFn, [], {\n          node: updaterSteps,\n          scope: {key},\n        })\n        if (is.store(storeOrFn)) {\n          lastValues.current[key] = storeOrFn.getState()\n          const storeRef = getStoreState(storeOrFn)\n          addRefOp(lastValues, {\n            type: 'field',\n            field: key,\n            from: storeRef,\n          })\n          applyTemplate('splitMatchStore', storeRef, updater)\n        }\n      }\n    })\n    if (needBarrier!) {\n      applyTemplate('splitBase', lastValues)\n    }\n    splitterSeq = [\n      needBarrier! && step.barrier({priority: 'sampler'}),\n      needBarrier! &&\n        step.mov({\n          store: lastValues,\n          to: 'a',\n        }),\n      step.filter({\n        fn(data, scopeTargets, stack) {\n          for (let i = 0; i < caseNames.length; i++) {\n            const caseName = caseNames[i]\n            const caseValue = includes(units, caseName)\n              ? stack.a[caseName]\n              : match[caseName](data)\n            if (caseValue) {\n              launchCase(scopeTargets, caseName, data, stack)\n              return\n            }\n          }\n          launchCase(scopeTargets, '__', data, stack)\n        },\n      }),\n    ]\n  } else {\n    throwError('expect match to be unit, function or object')\n  }\n  createNode({\n    meta: {op: 'split'},\n    parent: source,\n    scope: targets,\n    node: splitterSeq!,\n    family: {\n      type: 'crosslink',\n      owners: Array.from(owners),\n    },\n    regional: true,\n  })\n  if (!knownCases) return targets\n}\n","import {createDefer} from '../defer'\nimport {is} from '../is'\nimport {launch, forkPage} from '../kernel'\nimport {Scope} from '../unit.h'\n\nexport function allSettled(\n  start: any,\n  {scope, params: ctx}: {scope: Scope; params?: any},\n) {\n  if (!is.unit(start))\n    return Promise.reject(Error('first argument should be unit'))\n  const defer = createDefer()\n  //@ts-ignore\n  defer.parentFork = forkPage\n  const {fxCount} = scope\n  fxCount.scope.defers.push(defer)\n\n  const launchUnits = [start]\n  const launchParams = []\n  if (is.effect(start)) {\n    launchParams.push({\n      params: ctx,\n      req: {\n        rs(value: any) {\n          //@ts-ignore\n          defer.value = {status: 'done', value}\n        },\n        rj(value: any) {\n          //@ts-ignore\n          defer.value = {status: 'fail', value}\n        },\n      },\n    })\n  } else {\n    launchParams.push(ctx)\n  }\n  launchUnits.push(fxCount)\n  launchParams.push(null)\n  launch({\n    target: launchUnits,\n    params: launchParams,\n    forkPage: scope,\n  })\n  return defer.req\n}\n","import {getForkPage, getGraph, getMeta, getParent} from '../getter'\nimport {is} from '../is'\nimport {throwError} from '../throw'\nimport {setForkPage, getPageRef, currentPage} from '../kernel'\nimport {createNode} from '../createNode'\nimport {step} from '../typedef'\nimport type {Domain, Scope, Store} from '../unit.h'\nimport type {Node, StateRef} from '../index.h'\nimport {forEach} from '../collection'\nimport {DOMAIN, SAMPLER, FORK_COUNTER, SCOPE} from '../tag'\n\nexport function normalizeValues(\n  values: Map<Store<any>, any> | Array<[any, any]> | Record<string, any>,\n  assertEach?: (key: any, value: any) => void,\n) {\n  if (Array.isArray(values)) values = new Map(values)\n  if (values instanceof Map) {\n    const result = {} as Record<string, any>\n    for (const [key, value] of values) {\n      if (!is.unit(key)) throwError('Map key should be a unit')\n      if (assertEach) assertEach(key, value)\n      result[key.sid!] = value\n    }\n    return result\n  }\n  return values\n}\n\n/**\n everything we need to clone graph section\n reachable from given unit\n */\nexport function cloneGraph(unit?: Domain): Scope {\n  const forkInFlightCounter = createNode({\n    scope: {\n      defers: [],\n      inFlight: 0,\n      fxID: 0,\n    },\n    node: [\n      step.compute({\n        fn(_, scope, stack) {\n          if (!getParent(stack)) {\n            scope.fxID += 1\n            return\n          }\n          if (getMeta(getParent(stack).node, 'named') === 'finally') {\n            scope.inFlight -= 1\n          } else {\n            scope.inFlight += 1\n            scope.fxID += 1\n          }\n        },\n      }),\n      step.barrier({priority: SAMPLER}),\n      step.run({\n        fn(_, scope) {\n          const {inFlight, defers, fxID} = scope\n          if (inFlight > 0 || defers.length === 0) return\n          Promise.resolve().then(() => {\n            if (scope.fxID !== fxID) return\n            forEach(defers.splice(0, defers.length), (defer: any) => {\n              setForkPage(defer.parentFork)\n              defer.rs(defer.value)\n            })\n          })\n        },\n      }),\n    ],\n    meta: {unit: FORK_COUNTER},\n  })\n  const page = {} as Record<string, StateRef>\n  const storeChange = createNode({\n    node: [\n      step.compute({\n        fn(value, __, stack) {\n          const storeStack = getParent(stack)\n          if (storeStack && getParent(storeStack)) {\n            const storeNode = storeStack.node\n            if (\n              !getMeta(storeNode, 'isCombine') ||\n              getMeta(getParent(storeStack).node, 'op') !== 'combine'\n            ) {\n              const forkPage: Scope = getForkPage(stack)\n              const id = storeNode.scope.state.id\n              const sid = getMeta(storeNode, 'sid')\n              forkPage.sidIdMap[sid] = id\n              forkPage.sidValuesMap[sid] = value\n            }\n          }\n        },\n      }),\n    ],\n  })\n  const resultScope: Scope = {\n    cloneOf: unit,\n    reg: page,\n    sidValuesMap: {},\n    sidIdMap: {},\n    getState(store: any) {\n      if ('current' in store) {\n        return getPageRef(currentPage, resultScope, null, store).current\n      }\n      return stateGetter(getGraph(store), resultScope)\n    },\n    kind: SCOPE,\n    graphite: createNode({\n      family: {\n        type: DOMAIN,\n        links: [forkInFlightCounter, storeChange],\n      },\n      meta: {unit: 'fork'},\n      scope: {forkInFlightCounter},\n    }),\n    additionalLinks: {},\n    handlers: {},\n    fxCount: forkInFlightCounter,\n    storeChange,\n  }\n  return resultScope\n}\nfunction stateGetter(node: Node, scope: Scope) {\n  return getPageRef(currentPage, scope, node, node.scope.state, true).current\n}\n","import {is} from '../is'\nimport {throwError} from '../throw'\nimport {Domain} from '../unit.h'\nimport {normalizeValues, cloneGraph} from './util'\nimport {getMeta} from '../getter'\n\nexport function fork(\n  domainOrConfig?: Domain | {values?: any; handlers?: any},\n  optiionalConfig?: {values?: any; handlers?: any},\n) {\n  let config: {values?: any; handlers?: any} | void = domainOrConfig as any\n  let domain: Domain\n  if (is.domain(domainOrConfig)) {\n    domain = domainOrConfig\n    config = optiionalConfig\n  }\n\n  const forked = cloneGraph(domain!)\n\n  if (config) {\n    if (config.values) {\n      const valuesSidMap = normalizeValues(\n        config.values,\n        unit =>\n          !is.store(unit) &&\n          throwError('Values map can contain only stores as keys'),\n      )\n      Object.assign(forked.sidValuesMap, valuesSidMap)\n    }\n    if (config.handlers) {\n      forked.handlers = normalizeValues(config.handlers, unit => {\n        if (!is.effect(unit))\n          throwError(`Handlers map can contain only effects as keys`)\n        if (getMeta(unit, 'attached'))\n          throwError('Handlers can`t accept attached effects')\n      })\n    }\n  }\n  return forked\n}\n","import {is, isObject} from '../is'\nimport {throwError} from '../throw'\nimport {launch} from '../kernel'\nimport type {Domain, Scope} from '../unit.h'\nimport type {Node} from '../index.h'\nimport {forEach, includes} from '../collection'\nimport {STORE} from '../tag'\nimport {normalizeValues} from './util'\nimport {getGraph, getLinks, getMeta, getOwners} from '../getter'\n\nfunction traverse(root: Node, fn: (node: Node, sid: string) => void) {\n  const list = [] as Node[]\n  ;(function visit(node) {\n    if (includes(list, node)) return\n    list.push(node)\n    if (getMeta(node, 'unit') === STORE && getMeta(node, 'sid')) {\n      fn(node, getMeta(node, 'sid'))\n    }\n    forEach(node.next, visit)\n    forEach(getOwners(node), visit)\n    forEach(getLinks(node), visit)\n  })(root)\n}\n\n/**\n hydrate state on client\n\n const root = createDomain()\n hydrate(root, {\n  values: window.__initialState__\n})\n\n */\nexport function hydrate(domain: Domain | Scope, {values}: {values: any}) {\n  if (!isObject(values)) {\n    throwError('values property should be an object')\n  }\n  const normalizedValues = normalizeValues(values)\n  const valuesSidList = Object.getOwnPropertyNames(normalizedValues)\n  const storeNodes: Node[] = []\n  const storeValues: any[] = []\n  let forkPage: Scope\n  let traverseTarget: Node\n  if (is.scope(domain)) {\n    forkPage = domain\n    Object.assign(forkPage.sidValuesMap, normalizedValues)\n    if (!forkPage.cloneOf) throwError('scope should be created from domain')\n    traverseTarget = getGraph(forkPage.cloneOf)\n  } else if (is.domain(domain)) {\n    traverseTarget = getGraph(domain)\n  } else {\n    throwError('first argument of hydrate should be domain or scope')\n  }\n  traverse(traverseTarget!, (node, sid) => {\n    // forkPage.sidIdMap[sid] = node.scope.state.id\n    if (includes(valuesSidList, sid)) {\n      storeNodes.push(node)\n      storeValues.push(normalizedValues[sid])\n    }\n  })\n  launch({\n    target: storeNodes,\n    params: storeValues,\n    forkPage: forkPage!,\n  })\n}\n","import {createDefer} from '../defer'\nimport {is} from '../is'\nimport {throwError} from '../throw'\nimport {launch, forkPage} from '../kernel'\nimport {Scope} from '../unit.h'\n\n/** bind event to scope */\nexport function scopeBind(unit: any, {scope}: {scope?: Scope} = {}) {\n  if (!scope && !forkPage) {\n    throwError('scopeBind cannot be called outside of forked .watch')\n  }\n  const savedForkPage = scope || forkPage!\n  return is.effect(unit)\n    ? (params: any) => {\n        const req = createDefer()\n        launch({\n          target: unit,\n          params: {\n            params,\n            req,\n          },\n          forkPage: savedForkPage,\n        })\n        return req.req\n      }\n    : (params: any) => {\n        launch({target: unit, params, forkPage: savedForkPage})\n        return params\n      }\n}\n","import type {Scope, Store} from '../unit.h'\nimport {forIn} from '../collection'\n\n/**\n serialize state on server\n */\nexport function serialize(\n  scope: Scope,\n  {ignore = []}: {ignore?: Array<Store<any>>} = {},\n) {\n  const ignoredStores = ignore.map(({sid}) => sid)\n  const result = {} as Record<string, any>\n  forIn(scope.sidValuesMap, (value, sid) => {\n    if (ignoredStores.includes(sid)) return\n    const id = scope.sidIdMap[sid]\n    // if (!scope.changedStores.has(id)) return\n    if (id && id in scope.reg) {\n      result[sid] = scope.reg[id].current\n    } else {\n      result[sid] = value\n    }\n  })\n  return result\n}\n","export const observableSymbol: any =\n  (typeof Symbol !== 'undefined' && Symbol.observable) || '@@observable'\n","import {kind} from './index.h'\nimport {DOMAIN, STORE, EVENT, EFFECT, SCOPE} from './tag'\nimport {isObject, isFunction} from './is'\nimport {Domain, Effect, Event, Scope, Store} from './unit.h'\n\nexport const unit = (obj: any) =>\n  (isFunction(obj) || isObject(obj)) && 'kind' in obj\n\nconst is = (type: kind) => (obj: any) => unit(obj) && obj.kind === type\n\nexport const store = is(STORE) as (value: any) => value is Store<unknown>\nexport const event = is(EVENT) as (value: any) => value is Event<unknown>\nexport const effect = is(EFFECT) as (\n  value: any,\n) => value is Effect<unknown, unknown, unknown>\nexport const domain = is(DOMAIN) as (value: any) => value is Domain\nexport const scope = is(SCOPE) as (value: any) => value is Scope\n","export const throwError = (message: string) => {\n  throw Error(message)\n}\n","const idCount = () => {\n  let id = 0\n  return () => `${++id}`\n}\n\nexport const nextUnitID = idCount()\nexport const nextStepID = idCount()\nexport const nextNodeID = idCount()\n","export const bind = (fn: Function, target: any) => fn.bind(null, target)\n","import {\n  StateRef,\n  Run,\n  Filter,\n  Compute,\n  Barrier,\n  CheckDefined,\n  CheckChanged,\n  MovValueToRegister,\n  MovValueToStore,\n  MovStoreToRegister,\n  MovStoreToStore,\n  MovRegisterToStore,\n} from './index.h'\nimport {nextStepID} from './id'\nimport {bind} from './bind'\nimport {BARRIER, FILTER, STACK, STORE} from './tag'\nimport {Stack} from './kernel'\n\nconst cmd = (\n  type: 'check' | 'compute' | 'filter' | 'mov' | 'barrier',\n  data: any,\n): any => ({\n  id: nextStepID(),\n  type,\n  data,\n})\n\nlet nextBarrierID = 0\n\nexport const barrier = ({\n  priority = BARRIER,\n}: {\n  priority?: 'barrier' | 'sampler'\n}): Barrier =>\n  cmd(BARRIER, {\n    barrierID: ++nextBarrierID,\n    priority,\n  })\nexport const mov: {\n  <T>(data: {from: 'value'; store: T; target: StateRef}): MovValueToStore<T>\n  <T>(data: {\n    from: 'value'\n    to: 'stack' | 'a' | 'b'\n    store: T\n  }): MovValueToRegister<T>\n  (data: {from: 'a' | 'b' | 'stack'; target: StateRef}): MovRegisterToStore\n  (data: {\n    from: 'a' | 'b' | 'stack'\n    to: 'a' | 'b' | 'stack'\n  }): MovRegisterToStore\n  (data: {store: StateRef; target: StateRef}): MovStoreToStore\n  (data: {store: StateRef; to: 'stack' | 'a' | 'b'}): MovStoreToRegister\n  (data: {store: StateRef}): MovStoreToRegister\n  // (data: {\n  //   from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  //   to?: 'stack' | 'a' | 'b' | 'store'\n  //   store?: StateRef\n  //   target?: StateRef\n  // }): Mov\n} = ({\n  from = STORE,\n  store,\n  target,\n  to = target ? STORE : STACK,\n}: {\n  from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  to?: 'stack' | 'a' | 'b' | 'store'\n  store?: StateRef\n  target?: StateRef\n}) => cmd('mov', {from, store, to, target})\nexport const check = {\n  defined: (): CheckDefined => cmd('check', {type: 'defined'}),\n  changed: ({store}: {store: StateRef}): CheckChanged =>\n    cmd('check', {type: 'changed', store}),\n}\nexport const compute: (data: {\n  fn(data: any, scope: {[key: string]: any}, stack: Stack): any\n}) => Compute = bind(cmd, 'compute')\nexport const filter: (data: {\n  fn(data: any, scope: {[key: string]: any}, stack: Stack): any\n}) => Filter = bind(cmd, FILTER)\nexport const run: (data: {\n  fn(data: any, scope: {[key: string]: any}, stack: Stack): any\n}) => Run = bind(cmd, 'run')\nexport const update = ({store}: {store: StateRef}) =>\n  mov({from: STACK, target: store})\n","import type {StateRef, StateRefOp} from './index.h'\nimport {nextStepID} from './id'\n\nexport const createStateRef = (current?: any): StateRef => ({\n  id: nextStepID(),\n  current,\n})\nexport const readRef = ({current}: StateRef | {current: any}) => current\n\nexport const addRefOp = (ref: StateRef, op: StateRefOp) => {\n  if (!ref.before) ref.before = []\n  ref.before!.push(op as any)\n}\n","import type {Stack} from './kernel'\n\nexport const callStackAReg = (stack: any, {fn}: any, {a}: Stack) => fn(stack, a)\nexport const callARegStack = (stack: any, {fn}: any, {a}: Stack) => fn(a, stack)\nexport const callStack = (stack: any, {fn}: any, _: Stack) => fn(stack)\n","import type {Node, StateRef} from './index.h'\nimport {OPEN_O} from './tag'\n\nexport const getGraph = (graph: any): Node => graph.graphite || graph\nexport const getOwners = (node: Node) => node.family.owners\nexport const getLinks = (node: Node) => node.family.links\nexport const getStoreState = (store: any): StateRef => store.stateRef\nexport const getConfig = (opts: any) => opts.config\nexport const getNestedConfig = (opts: any) => opts[OPEN_O]\nexport const getValue = (stack: any) => stack.value\nexport const getSubscribers = (store: any) => store.subscribers\nexport const getParent = (unit: any) => unit.parent\nexport const getForkPage = (val: any) => val.forkPage\nexport const getMeta = (unit: any, field: string) => getGraph(unit).meta[field]\nexport const setMeta = (unit: any, field: string, value: any) =>\n  (getGraph(unit).meta[field] = value)\n","import {NodeUnit} from './index.h'\nimport {getGraph, getOwners, getLinks} from './getter'\nimport {DOMAIN, CROSSLINK} from './tag'\n\nexport const own = (ownerUnit: NodeUnit, links: NodeUnit[]) => {\n  const owner = getGraph(ownerUnit)\n  for (let i = 0; i < links.length; i++) {\n    const link = getGraph(links[i])\n    if (owner.family.type !== DOMAIN) link.family.type = CROSSLINK\n    getOwners(link).push(owner)\n    getLinks(owner).push(link)\n  }\n}\n","import {getConfig, getNestedConfig} from './getter'\nimport {assertObject} from './is'\n\nexport const onConfigNesting = (\n  rawConfig: any,\n  fn: (babelData: any, userConfig: any) => void,\n) => {\n  assertObject(rawConfig)\n  if (getNestedConfig(rawConfig)) {\n    fn(getConfig(rawConfig), getNestedConfig(rawConfig))\n  }\n}\n\nexport const processArgsToConfig = (args: any[]): [any[], any | void] => {\n  let metadata\n  onConfigNesting(args[0], (injected, config) => {\n    metadata = injected\n    args = config\n  })\n  return [args, metadata]\n}\n","import {Node, NodeUnit} from './index.h'\nimport {getGraph, getOwners, getLinks, getSubscribers, getMeta} from './getter'\nimport {is} from './is'\nimport {removeItem} from './collection'\nimport {CROSSLINK} from './tag'\n\nconst removeFromNode = (currentNode: Node, targetNode: Node) => {\n  removeItem(currentNode.next, targetNode)\n  removeItem(getOwners(currentNode), targetNode)\n  removeItem(getLinks(currentNode), targetNode)\n}\nconst clearNodeNormalized = (\n  targetNode: Node,\n  deep: boolean,\n  isDomainUnit: boolean,\n) => {\n  targetNode.next.length = 0\n  targetNode.seq.length = 0\n  //@ts-ignore\n  targetNode.scope = null\n  let currentNode\n  let list = getLinks(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (\n      deep ||\n      (isDomainUnit && !getMeta(targetNode, 'sample')) ||\n      currentNode.family.type === CROSSLINK\n    ) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        getMeta(currentNode, 'op') !== 'on' && isDomainUnit,\n      )\n    }\n  }\n  list = getOwners(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (isDomainUnit && currentNode.family.type === CROSSLINK) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        getMeta(currentNode, 'op') !== 'on' && isDomainUnit,\n      )\n    }\n  }\n}\nconst clearMap = (map: any) => map.clear()\nexport const clearNode = (\n  graphite: NodeUnit,\n  {\n    deep,\n  }: {\n    deep?: boolean\n  } = {},\n) => {\n  let isDomainUnit = false\n  //@ts-ignore\n  if (graphite.ownerSet) graphite.ownerSet.delete(graphite)\n  if (is.store(graphite)) {\n    clearMap(getSubscribers(graphite))\n  } else if (is.domain(graphite)) {\n    isDomainUnit = true\n    //@ts-ignore\n    const history = graphite.history\n    clearMap(history.events)\n    clearMap(history.effects)\n    clearMap(history.stores)\n    clearMap(history.domains)\n  }\n  clearNodeNormalized(getGraph(graphite), !!deep, isDomainUnit)\n}\n","import {Subscription, NodeUnit} from './index.h'\nimport {clearNode} from './clearNode'\n\nexport const createSubscription = (node: NodeUnit): Subscription => {\n  const result = () => clearNode(node)\n  result.unsubscribe = result\n  return result\n}\n","import {onConfigNesting} from './config'\nimport {createNode} from './createNode'\nimport {Subscription, NodeUnit, Cmd} from './index.h'\nimport {createSubscription} from './subscription'\nimport {assertNodeSet} from './is'\n\nexport const createLinkNode = (\n  parent: NodeUnit,\n  child: NodeUnit | NodeUnit[],\n  {\n    node,\n    scope,\n    meta,\n  }: {\n    node?: Array<Cmd | false | void | null>\n    scope?: {[name: string]: any}\n    meta?: {[name: string]: any}\n  },\n) =>\n  createNode({\n    node,\n    parent,\n    child,\n    scope,\n    meta,\n    family: {\n      owners: [parent, child],\n      links: child,\n    },\n    regional: true,\n  })\nexport const forward = (opts: {\n  from: NodeUnit | NodeUnit[]\n  to: NodeUnit | NodeUnit[]\n  meta?: Record<string, any>\n}): Subscription => {\n  let config\n  onConfigNesting(opts, (injectedData, userConfig) => {\n    config = injectedData\n    opts = userConfig\n  })\n  const {from, to, meta = {op: 'forward'}} = opts\n  assertNodeSet(from, 'forward', '\"from\"')\n  assertNodeSet(to, 'forward', '\"to\"')\n  if (config) meta.config = config\n  return createSubscription(\n    createNode({\n      parent: from,\n      child: to,\n      meta,\n      family: {},\n      regional: true,\n    }),\n  )\n}\n","import {step} from './typedef'\nimport {callStack} from './caller'\nimport {createNode} from './createNode'\nimport {Subscription, NodeUnit} from './index.h'\nimport {createSubscription} from './subscription'\nimport {throwError} from './throw'\nimport {isFunction} from './is'\n\nexport const watchUnit = (\n  unit: NodeUnit,\n  handler: (payload: any) => any,\n): Subscription => {\n  if (!isFunction(handler)) throwError('.watch argument should be a function')\n  return createSubscription(\n    createNode({\n      scope: {fn: handler},\n      node: [step.run({fn: callStack})],\n      parent: unit,\n      meta: {op: 'watch'},\n      family: {\n        owners: unit,\n      },\n      regional: true,\n    }),\n  )\n}\n"],"names":["assertNodeSetItem","value","method","valueName","reason","isObject","isFunction","throwError","assertNodeSet","Array","isArray","i","length","withRegion","unit","cb","regionStack","parent","template","getMeta","readTemplate","sidRoot","getParent","createNode","node","from","source","to","target","child","scope","meta","family","familyRaw","type","regional","sources","arrifyNodes","links","owners","seq","item","push","result","id","nextNodeID","next","getOwners","getLinks","own","getValue","forIn","obj","key","forEach","list","fn","launch","payload","upsert","pageForLaunch","currentPage","stackForLaunch","forkPageForLaunch","forkPage","params","defer","page","getForkPage","pushFirstHeapItem","getGraph","isRoot","stop","skip","reg","lastStartedState","isWatch","kernelLoop","deleteMin","idx","stack","hasPageReg","hasScopeReg","local","fail","stepn","step","priority","barrierID","data","fullID","barriers","has","add","pushHeap","delete","store","STORE","pageForRef","getPageForRef","initRefInScope","undefined","readRef","getPageRef","current","tryRun","fxCount","storeChange","additionalLinks","unitObjectName","objOrArr","name","comma","is","getCompostite","fullName","toString","setStoreName","rawName","shortName","Object","assign","createName","path","composite","concat","applyTemplate","args","handlers","createEvent","nameOrConfig","maybeConfig","event","oldPage","setCurrentPage","create","callCreate","graphite","initUnit","watch","bind","watchUnit","map","deriveEvent","callStack","filter","filterMap","defined","prepend","contramapped","createLinkNode","op","applyParentHook","createStore","defaultState","props","onEvent","off","getSubscribers","set","createSubscription","updateStore","updateFilter","plainState","createStateRef","oldState","updates","createNamedEvent","plainStateId","subscribers","Map","stateRef","getState","reachedPage","targetRef","setState","state","reset","units","on","nodeSet","currentSubscription","get","firstState","config","lastResult","console","error","storeState","innerStore","strict","linkNode","addRefOp","getStoreState","noInit","eventOrFn","subscription","defaultConfig","changed","update","_","a","sid","isStrict","combine","handler","stores","onConfigNesting","injectedData","userConfig","structStoreShape","shapeReady","noArraySpread","rawHandler","slice","storeCombination","createStoreObject","createDefer","req","Promise","rs","rj","catch","err","createEffect","instance","getType","setMeta","kind","use","anyway","finally","done","named","status","doneData","failData","effectRunner","getHandler","getCurrent","handlerId","onResolve","onSettled","onReject","then","fx","runner","upd","savedFork","setForkPage","inFlight","x","pending","amount","attach","injected","effect","mapParams","isPlainFunction","attached","runnerSteps","runnerFn","isPlain","computedParams","splice","createApi","setters","metadata","processArgsToConfig","createDomain","domains","Set","effects","events","history","domain","hooks","onCreateEvent","createHook","onCreateEffect","onCreateStore","onCreateDomain","forward","fromObservable","observable","assertObject","observableItem","observableSymbol","subscribe","disposer","complete","merge","sample","greedy","clock","atLeastOneFieldExists","sampleConfigFields","field","validateSampleConfig","needToCombine","isUpward","sourceRef","callARegStack","hasSource","sourceState","clockState","callStackAReg","guard","filterIsUnit","restore","v","split","targets","match","knownCases","cases","matchIsUnit","matchIsFunction","matchIsShape","__","splitterSeq","values","caseNames","keys","scopeTargets","String","launchCase","includes","lastValues","needBarrier","updaterSteps","storeOrFn","updater","storeRef","caseName","allSettled","start","ctx","reject","Error","parentFork","defers","launchUnits","launchParams","normalizeValues","assertEach","fork","domainOrConfig","optiionalConfig","forked","forkInFlightCounter","fxID","resolve","storeStack","storeNode","sidIdMap","sidValuesMap","resultScope","cloneOf","stateGetter","cloneGraph","valuesSidMap","hydrate","traverseTarget","normalizedValues","valuesSidList","getOwnPropertyNames","storeNodes","storeValues","root","visit","traverse","scopeBind","savedForkPage","serialize","ignore","ignoredStores","Symbol","message","idCount","nextUnitID","nextStepID","cmd","nextBarrierID","barrier","mov","check","compute","run","ref","before","graph","getConfig","opts","getNestedConfig","val","ownerUnit","owner","link","readSidRoot","withFactory","loc","flat","removeItem","pos","indexOf","heap","b","ret","isSameType","r","l","queue","ix","first","last","size","getPriority","bucket","t","newForkPage","newPage","isGetState","refsMap","isFresh","compositeName","rawConfig","removeFromNode","currentNode","targetNode","clearNodeNormalized","deep","isDomainUnit","pop","clearMap","clear","clearNode","ownerSet","unsubscribe","normalizeConfig","part","hookType","rawConfigA","rawConfigB","isDomain","unitId","thru","observer","nativeTemplate","mapped","stateFirst","needSpread","clone","stateNew","rawShape","storeStateRef","spread","childRef","defaultShape","ok","sidechain","trigger","acc","res","hook"],"mappings":"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"}